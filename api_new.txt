<?php
/**
 * Theme functions and definitions.
 *
 * For additional information on potential customization options,
 * read the developers' documentation:
 *
 * https://developers.elementor.com/docs/hello-elementor-theme/
 *
 * @package HelloElementorChild
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

define( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );

/**
 * Load child theme scripts & styles.
 *
 * @return void
 */
function hello_elementor_child_scripts_styles() {

	wp_enqueue_style(
		'hello-elementor-child-style',
		get_stylesheet_directory_uri() . '/style.css',
		[
			'hello-elementor-theme-style',
		],
		HELLO_ELEMENTOR_CHILD_VERSION
	);

}
add_action( 'wp_enqueue_scripts', 'hello_elementor_child_scripts_styles', 20 );




//ADMIN UI


// Add CORS headers to handle cross-origin requests
function add_cors_headers() {
    // Define the allowed origins (you can change these based on your environment)
    $allowed_origins = [
        'http://localhost:3000',      // Local development (e.g., React app)
        'https://bynuna-chi.vercel.app', // Vercel app
        'https://testwithupturnist.com', // Your production domain
        'https://bynuna.ae',          // Another production domain
        'https://admin.testwithupturnist.com', // Your subdomain or admin panel
		'https://admin.bynuna.ae', // Your subdomain or admin panel
    ];

    // Get the origin of the request (the domain making the request)
    $origin = $_SERVER['HTTP_ORIGIN'] ?? ''; 

    // Check if the origin is in the allowed list
    if (in_array($origin, $allowed_origins)) {
        // If the origin is allowed, set the Access-Control-Allow-Origin header
        header("Access-Control-Allow-Origin: $origin");
    }

    // Allow specific HTTP methods (GET, POST, OPTIONS, PUT)
    header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT");

    // Allow specific headers (for example, Content-Type, Authorization, X-WP-Nonce, Cache-Control, etc.)
    header("Access-Control-Allow-Headers: Content-Type, Authorization, X-WP-Nonce, Cache-Control");

    // Allow credentials (cookies, Authorization headers)
    header("Access-Control-Allow-Credentials: true");

    // Handle preflight OPTIONS request (i.e., when the browser checks if it's safe to make the actual request)
    if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
        // Exit early as we don't need to proceed with the rest of the request
        exit(0);
    }
}

// Hook into the WordPress 'init' action to apply the CORS headers before any output is sent
add_action('init', 'add_cors_headers');





//COLOR SCHEME
function wpacg_bynuna_admin_color_scheme() {
  //Get the theme directory
  $theme_dir = get_stylesheet_directory_uri();

  //Bynuna
  wp_admin_css_color( 'bynuna', __( 'Bynuna' ),
    $theme_dir . '/bynuna.css',
    array( '#988643', '#f2fcff', '#aa9d88' , '#a4914a')
  );
}
add_action('admin_init', 'wpacg_bynuna_admin_color_scheme');



//HIDE WOOCOMERECE FIELDS
function remove_product_data_tabs($tabs) {
  
        //unset($tabs['inventory']);            // Hide Inventory tab
        unset($tabs['shipping']);             // Hide Shipping tab
        // unset($tabs['linked_product']);    // Hide Linked Products tab
        unset($tabs['attributes']);           // Hide Attributes tab
        unset($tabs['advanced']);             // Hide Advanced tab
    
    return $tabs;
}
add_filter('woocommerce_product_data_tabs', 'remove_product_data_tabs');

function hide_product_tags_field() {
   
        remove_meta_box('tagsdiv-post_tag', 'product', 'side'); // Hide Tags from the right sidebar
   
}
add_action('admin_menu', 'hide_product_tags_field');

add_action('admin_head', function () {
   
        echo '<style>
          #product_catdiv, .sale_schedule, #product_branddiv, .form-field._tax_status_field, .form-field._tax_class_field, .product-data-wrapper, ._manage_stock_field, .inventory_sold_individually, .form-field._global_unique_id_field, .marketplace-suggestions_options, #tagsdiv-product_tag, .attribute_options { display: none !important; } /* Hides the Product Data section */
        </style>';
    
});



//WIDGET FOR ANALYTICS
function custom_dashboard_widget() {
    // Fetch data from the API
    $url = 'https://admin.bynuna.ae/wp-json/wc-analytics/reports/revenue/stats?consumer_key=ck_c10388e89a3e74feeaf32ec349bf9f810f8071bc&consumer_secret=cs_48ef9b20fbd7ca0883b3cb20e9cd0d78398f3d03&orderby=date&order=desc&after=2024-09-21T00%3A00%3A00&page=1&per_page=25&interval=day&_locale=user';
    $response = wp_remote_get($url);

    if (is_wp_error($response)) {
        echo 'Unable to fetch data.';
        return;
    }

    $data = json_decode(wp_remote_retrieve_body($response), true);
    
    if (empty($data['totals'])) {
        echo 'No data available.';
        return;
    }

    // Extract totals and intervals data
    $totals = $data['totals'];
    $intervals = array_slice($data['intervals'], 0, 5); // Limit to 5 recent activities

    ?>
   
        <!-- Stats Cards (Vertical Layout) -->
        <div class="dashboard-widget-stats-vertical">
            <div class="card">
                <div class="card-icon orders">
                    <i class="bi bi-cart"></i> <!-- Bootstrap Icon for Cart -->
                </div>
                <div class="card-title">Orders Count</div>
                <div class="card-value"><?php echo $totals['orders_count']; ?></div>
            </div>
            <div class="card">
                <div class="card-icon sales">
                    <i class="bi bi-cash-stack"></i> <!-- Bootstrap Icon for Sales -->
                </div>
                <div class="card-title">Gross Sales</div>
                <div class="card-value"><?php echo '₹' . number_format($totals['gross_sales'], 2); ?> </div>
            </div>
            <div class="card">
                <div class="card-icon revenue">
                    <i class="bi bi-wallet2"></i> <!-- Bootstrap Icon for Wallet -->
                </div>
                <div class="card-title">Net Revenue</div>
                <div class="card-value"><?php echo '₹' . number_format($totals['net_revenue'], 2); ?></div>
            </div>
        </div>

        <!-- Recent Activity Table (Limit 5 Entries) -->
        <h4>Recent Activity</h4>
        <table class="dashboard-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Orders</th>
                    <th>Gross Sales</th>
                    <th>Net Revenue</th>
                    <th>Avg Order Value</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($intervals as $interval): ?>
                    <tr>
                        <td><?php echo date('Y-m-d', strtotime($interval['date_start'])); ?></td>
                        <td><?php echo $interval['subtotals']['orders_count']; ?></td>
                        <td><?php echo '₹' . number_format($interval['subtotals']['gross_sales'], 2); ?></td>
                        <td><?php echo '₹' . number_format($interval['subtotals']['net_revenue'], 2); ?></td>
                        <td><?php echo '₹' . number_format($interval['subtotals']['avg_order_value'], 2); ?></td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
   
    <?php
}

// Register the custom dashboard widget
function register_custom_dashboard_widget() {
    wp_add_dashboard_widget(
        'custom_dashboard_widget', // Widget slug
        'Revenue Analytics',       // Widget title
        'custom_dashboard_widget'  // Callback function
    );
}
add_action('wp_dashboard_setup', 'register_custom_dashboard_widget');

// Enqueue Bootstrap Icons CDN
function load_bootstrap_icons() {
    wp_enqueue_style( 'bootstrap-icons', 'https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css', false, null );
}
add_action('admin_enqueue_scripts', 'load_bootstrap_icons');

// Enqueue custom CSS styles
function custom_dashboard_widget_styles() {
    echo '<style>
    
        .custom-dashboard-widget {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
            color: #333;
        }

        .custom-dashboard-widget h3,
        .custom-dashboard-widget h4 {
            color: #3c3c3c;
            margin-bottom: 15px;
            font-size: 22px;
        }

        .custom-dashboard-widget h3 {
            font-weight: 600;
        }

        .custom-dashboard-widget h4 {
            font-weight: 500;
        }

        .dashboard-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .dashboard-table th,
        .dashboard-table td {
            padding: 8px;
            text-align: left;
            font-size: 12px;
            border: 1px solid #eee;
        }

        .dashboard-table th {
            background-color: #ffffff;
            color: #333;
            font-weight: 600;
        }

      

        .dashboard-widget-stats-vertical {
            display: flex;
            flex-direction: row;
            gap: 10px;
            margin-bottom: 20px;
        }

        .dashboard-widget-stats-vertical .card {
            min-width: inherit !important;
            max-width: inherit !important;
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            border: 1px solid #16bd4b;
            color: #16bd4b;
			width:100%;
        }

        .dashboard-widget-stats-vertical .card .card-title {
            font-size: 12px;
            margin-bottom: 0px;
            color: #333;
        }

        .dashboard-widget-stats-vertical .card .card-value {
            font-size: 16px;
            font-weight: 700;
            color: #16bd4b;
        }

        .dashboard-widget-stats-vertical .card .card-icon {
            font-size: 27px;
            color: #16bd4b !important;
            margin-bottom: 10px;
        }

        .dashboard-widget-stats-vertical .card .card-icon.orders {
            color: #2196f3;
        }

        .dashboard-widget-stats-vertical .card .card-icon.sales {
            color: #4caf50;
        }

        .dashboard-widget-stats-vertical .card .card-icon.revenue {
            color: #ff9800;
        }

        @media screen and (max-width: 768px) {
            .dashboard-widget-stats-vertical {
                flex-direction: column;
            }

            .dashboard-widget-stats-vertical .card {
                width: 100%;
            }
        }
    </style>';
}
add_action('admin_head', 'custom_dashboard_widget_styles');




//TOP ORDER WIDGET
// Register the dashboard widget
function top_ordered_products_dashboard_widget() {
    wp_add_dashboard_widget(
        'top_ordered_products_widget', // Widget slug
        'Top Ordered Products',        // Widget title
        'display_top_ordered_products' // Callback function to display the widget
    );
}
add_action('wp_dashboard_setup', 'top_ordered_products_dashboard_widget');

// Callback function to display the widget content
function display_top_ordered_products() {
    // Get the top ordered products
    $args = array(
        'post_type'      => 'product',
        'posts_per_page' => 5, // Display top 5 products
        'orderby'        => 'meta_value_num',
        'meta_key'       => 'total_sales', // WooCommerce stores sales count here
        'order'          => 'DESC'
    );

    $query = new WP_Query($args);

    if ($query->have_posts()) {
        echo '<table class="widefat">';
        echo '<thead><tr><th></th><th>Product</th><th>Sales</th></tr></thead>';
        echo '<tbody>';
        while ($query->have_posts()) {
            $query->the_post();
            $product = wc_get_product(get_the_ID());
            $total_sales = get_post_meta($product->get_id(), 'total_sales', true);

            // Get the product image
            $product_image_url = get_the_post_thumbnail_url($product->get_id(), 'thumbnail');
            $product_image = $product_image_url ? '<img src="' . esc_url($product_image_url) . '" alt="' . get_the_title() . '" style="width: 30px; height: 30px; object-fit: cover;" />' : 'No image';

            echo '<tr>';
            echo '<td>' . $product_image . '</td>';
            echo '<td><a href="' . get_edit_post_link() . '">' . get_the_title() . '</a></td>';
            echo '<td>' . number_format($total_sales) . '</td>';
            echo '</tr>';
        }
        echo '</tbody></table>';
    } else {
        echo '<p>No top ordered products found.</p>';
    }

    wp_reset_postdata();
}


//WIDGET FOR RECENT ORDERS

function recent_orders_dashboard_widget() {
    wp_add_dashboard_widget(
        'recent_orders_widget',      // Widget slug
        'Recent Orders',             // Widget title
        'display_recent_orders'      // Callback function to display the widget
    );
}
add_action('wp_dashboard_setup', 'recent_orders_dashboard_widget');

// Callback function to display the widget content
function display_recent_orders() {
    // WooCommerce REST API credentials
    $consumer_key = 'ck_c10388e89a3e74feeaf32ec349bf9f810f8071bc';
    $consumer_secret = 'cs_48ef9b20fbd7ca0883b3cb20e9cd0d78398f3d03';
    
    // Base API URL
    $base_url = 'https://admin.bynuna.ae/wp-json/wc/v3/orders';

    // Number of orders per page (set to 5 for the most recent 5 orders)
    $per_page = 5;
    $page = 1;

    // Construct the API URL
    $api_url = $base_url . '?consumer_key=' . $consumer_key . '&consumer_secret=' . $consumer_secret . '&per_page=' . $per_page . '&page=' . $page;

    // Perform the GET request
    $response = wp_remote_get($api_url);

    if (is_wp_error($response)) {
        echo 'Error retrieving orders: ' . $response->get_error_message();
        return;
    }

    // Decode the JSON response
    $orders = json_decode(wp_remote_retrieve_body($response), true);

    // Check if there are any orders
    if (!empty($orders)) {
        echo '<table class="widefat">';
        echo '<thead><tr><th>Order</th><th>Customer</th><th>Status</th><th>Total</th><th>Date</th></tr></thead>';
        echo '<tbody>';

        // Loop through the orders and display them
        foreach ($orders as $order) {
            $order_id = $order['id'];
            $customer_name = $order['billing']['first_name'] . ' ' . $order['billing']['last_name'];
            $order_status = ucfirst($order['status']);
            $order_total = '₹' . number_format($order['total'], 2);  // Adding ₹ symbol for the total
            $order_date = new DateTime($order['date_created']);
            $formatted_date = $order_date->format('M d, Y') . ' at ' . $order_date->format('g:i A');  // Format to 'Dec 24, 2024 at 2:30 PM'

            // Set status text color
            $status_colors = array(
                'completed' => 'color: #4caf50;',     // Green
                'processing' => 'color: #ff9800;',    // Orange
                'pending' => 'color: #2196f3;',       // Blue
                'cancelled' => 'color: #f44336;',     // Red
                'failed' => 'color: #9e9e9e;',        // Grey
                'on-hold' => 'color: #607d8b;',       // Blue-grey
            );

            // Default status text color (if not defined in the array)
            $status_color = isset($status_colors[$order['status']]) ? $status_colors[$order['status']] : 'color: #000000;';  // Default to black if not found

            // Render each order row
            echo '<tr>';
            echo '<td><a href="https://admin.bynuna.ae/wp-admin/post.php?post=' . $order_id . '&action=edit">#' . $order_id . '</a></td>';
            echo '<td>' . esc_html($customer_name) . '</td>';
            echo '<td style="' . $status_color . '">' . esc_html($order_status) . '</td>';
            echo '<td>' . esc_html($order_total) . '</td>';
            echo '<td>' . esc_html($formatted_date) . '</td>';
            echo '</tr>';
        }

        echo '</tbody></table>';
    } else {
        echo '<p>No recent orders found.</p>';
    }
}




//CUSTOM GENERAL STYLE FOR WORDPRESS DASHBOARD WIDGETS

function custom_dashboard_widget_styles_common() {
    echo '<style>
    
     .widefat td {
    vertical-align: top;
    color: #50575e;
    padding: 8px;
    text-align: left;
    font-size: 12px;
    border-right: 1px solid #eee;
    border-bottom: solid thin #eee;
    font-size: 12px !important;
}

.widefat {
  
    border: solid thin #eee !important;
}

.widefat tfoot tr td, .widefat tfoot tr th, .widefat thead tr td, .widefat thead tr th {
    color: #2c3338;
    padding: 8px;
    text-align: left;
    font-size: 12px;
    border: 1px solid #eee;
    font-weight: 600;
}

    </style>';
}
add_action('admin_head', 'custom_dashboard_widget_styles_common');



//GET USERS BY EMAIL

// Add a custom REST API endpoint to retrieve user by email
add_action( 'rest_api_init', function() {
    register_rest_route( 'custom/v1', '/users/', [
        'methods' => 'GET',
        'callback' => 'custom_get_user_by_email', // Renamed callback function
        'args' => [
            'email' => [
                'required' => true,
                'validate_callback' => function( $param, $request, $key ) {
                    return is_email( $param ); // Ensure the email format is valid
                }
            ],
        ]
    ]);
});

/**
 * Callback function for the custom REST API endpoint.
 * Retrieves the user by their email address.
 *
 * @param WP_REST_Request $data The request object.
 * @return array|int
 */
function custom_get_user_by_email( $data ) {
    // Get the email parameter from the request
    $email = sanitize_email( $data['email'] );

    // Check if the email is valid
    if ( ! is_email( $email ) ) {
        return 0; // Invalid email, return 0
    }

    // Query the user by email
    $user = get_user_by( 'email', $email );

    // If no user found, return 0
    if ( ! $user ) {
        return 0;
    }

    // Prepare user data to return
    $user_data = [
        'id' => $user->ID,
        'name' => $user->display_name,
        'email' => $user->user_email,
    ];

    // Return user data in response
    return $user_data;
}


//SHOW PRODUCT IMAGE IN REVIEW CUSTOM RST API
add_action( 'rest_api_init', function() {
    register_rest_route( 'custom/v1', '/product-reviews/', array(
        'methods' => 'GET',
        'callback' => 'get_product_reviews_with_images',
        'permission_callback' => '__return_true', // Public access, modify as needed
    ));
});

function get_product_reviews_with_images( $data ) {
    // Query to fetch all approved reviews
    $args = array(
        'status' => 'approve',
        'post_type' => 'product',
        'number' => 10, // Modify number of reviews per page as needed
    );

    // Fetch reviews from the database
    $reviews = get_comments( $args );

    // Prepare response array
    $response = [];

    foreach ( $reviews as $review ) {
        $product_id = $review->comment_post_ID;
        $product = wc_get_product( $product_id );

        // Get the product image URL
        $product_image = '';
        if ( has_post_thumbnail( $product_id ) ) {
            $product_image = wp_get_attachment_url( $product->get_image_id() );
        } else {
            // If no image, use a placeholder
            $product_image = 'https://via.placeholder.com/150';
        }

        // Prepare the review data
        $response[] = [
            'id' => $review->comment_ID,
            'date_created' => $review->comment_date,
            'product_id' => $product_id,
            'product_name' => $product->get_name(),
            'product_permalink' => get_permalink( $product_id ),
            'status' => $review->comment_approved,
            'reviewer' => $review->comment_author,
            'reviewer_email' => $review->comment_author_email,  // Include reviewer email
            'review' => $review->comment_content,
            'rating' => get_comment_meta( $review->comment_ID, 'rating', true ),
            'verified' => false, // You can implement your own logic to check if the reviewer is verified
            'reviewer_avatar' => get_avatar_url( $review->comment_author_email, ['size' => 96] ),
            'product_image' => $product_image,
        ];
    }

    return rest_ensure_response( $response );
}



//SHOW FEATURED IMAGES IN CUSTOM POST TYPE

function add_featured_image_details_to_all_rest_api() {
    // Get all custom post types (including built-in post type "post")
    $post_types = get_post_types(array('public' => true), 'names'); // Filters for public post types (including custom post types)
    
    // Loop through each post type and add the custom field
    foreach ($post_types as $post_type) {
        // Register the custom field for the featured image details
        register_rest_field(
            $post_type, // Use dynamic post type here
            'featured_image_details', // The custom field to be added
            array(
                'get_callback' => 'get_featured_image_details', // Callback function to get featured image details
                'schema' => null, // No schema required
            )
        );
    }
}

function get_featured_image_details($object) {
    // Get the post ID
    $post_id = $object['id'];

    // Get the featured image ID
    $featured_image_id = get_post_thumbnail_id($post_id);

    // If there's no featured image, return a default image
    if (!$featured_image_id) {
        return array(
            'src' => '',
            'alt' => 'Default image alt text',
            'sizes' => array(
                'thumbnail' => 'https://example.com/path/to/default-image-150x150.jpg',
                'medium' => 'https://example.com/path/to/default-image-300x200.jpg',
                'large' => 'https://example.com/path/to/default-image-1024x683.jpg'
            ),
            'width' => 1024,
            'height' => 683
        );
    }

    // Get image details using wp_get_attachment_image_src and other functions
    $image_details = array();

    // Get the full size image URL
    $image_details['src'] = wp_get_attachment_image_url($featured_image_id, 'full');

    // Get the image alt text
    $image_details['alt'] = get_post_meta($featured_image_id, '_wp_attachment_image_alt', true);

    // Get different image sizes (e.g., 'thumbnail', 'medium', 'large')
    $image_details['sizes'] = array(
        'thumbnail' => wp_get_attachment_image_url($featured_image_id, 'thumbnail'),
        'medium' => wp_get_attachment_image_url($featured_image_id, 'medium'),
        'large' => wp_get_attachment_image_url($featured_image_id, 'large'),
    );

    // Get the image width and height
    $image_details['width'] = getimagesize(get_attached_file($featured_image_id))[0];
    $image_details['height'] = getimagesize(get_attached_file($featured_image_id))[1];

    return $image_details;
}

// Hook to add the custom field to all REST API responses
add_action('rest_api_init', 'add_featured_image_details_to_all_rest_api');



//=================================================================================================================================================================================================================//

//ALERT BEFORE CHANGE IN FILTER
function show_message_before_save_post() {
    // Check if we are on the edit screen for a custom post type
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'filter') {
        ?>
        <div class="notice is-dismissible" style="background-color: #ffd7d7;color: #000;border-left: 8px solid #ff0000;font-size: 20px;padding: 30px;font-weight: bold;line-height: 1.6;box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);">
            <p style="font-size: 18px;"><strong> <span style="display:block;font-size: 22px; text-transform:uppercase; color:#fe1010; margin-bottom:10px;">Important Reminder:</span></strong> If you make any changes to filter items after they have been published (e.g., renaming the title, slug, etc.), you will need to re-import the WooCommerce products to reflect the updated filter data. 
            <br><strong>Please note:</strong> Deleting filter items does not require re-importing.
            <br>If you encounter any issues, please <strong>contact the administrator</strong> for assistance.</p>
        </div>
        <?php
    }
}
add_action('admin_notices', 'show_message_before_save_post');




/////////////////////////FILTER CUSTOM FIELD START///////////////////////////////////
// Display the filter items table on the product page in WooCommerce
// Display filter items table in the product edit page
function add_filter_items_table_to_product() {
    global $post;

    // Retrieve existing custom fields from the product meta
    $existing_custom_fields_string = get_post_meta( $post->ID, '_filter_items', true );

    // Decode the fields and split them into an array
    $existing_custom_fields = !empty( $existing_custom_fields_string ) ? explode( ',', $existing_custom_fields_string ) : [];

    ?>
    <div class="filter-items-table-container" style="padding: 20px; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
        <div style="background-color: #fff3cd; color: #856404; padding: 15px; border-radius: 5px; border: 1px solid #ffeeba; margin-bottom: 20px;">
            <h2 style="font-size: 16px; font-weight: bold;">⚠️ Data Entry Warning: Maintain Consistent Formatting ⚠️</h2>
            <p style="font-size: 14px;">To ensure data accuracy and prevent system inconsistencies, do not change the format of previously entered values. Once a format is established, it must remain the same.</p>
            <ul style="font-size: 14px;">
                <li><strong>🔹 If a value has been entered before, use the exact same format every time.</strong></li>
                <li><strong>🔹 If entering a new value, establish a format and follow it consistently for all future entries.</strong></li>
            </ul>
            <p style="font-size: 14px; font-weight: bold; color: #155724;">🚨 Even a small change—such as extra spacing, different capitalization, or slight variations in units—will cause the system to treat the values as separate entries, leading to filtering issues.</p>
            <h3 style="font-size: 16px; color: #856404;">Examples of Incorrect Changes:</h3>
            <ul style="font-size: 14px;">
                <li><strong>✅ Previously Entered: "50 mm" → ❌ Incorrect: "50mm", "50.0 mm"</strong></li>
                <li><strong>✅ Previously Entered: "Black" → ❌ Incorrect: "black", "BLACK"</strong></li>
                <li><strong>✅ Previously Entered: "1000" → ❌ Incorrect: "1,000", "1000.0"</strong></li>
            </ul>
            <p style="font-size: 14px;">📌 Before submitting, always check that your entry matches the existing format exactly. If it’s a new value, decide on a format and stick to it for all future entries.</p>
        </div>

        <h3><?php _e( 'Filter Items', 'woocommerce' ); ?></h3>

        <!-- Accordion Toggle Button -->
        <button type="button" class="accordion" style="margin-bottom:10px;background-color: #3498db; color: #fff; padding: 10px; width: 100%; border: none; border-radius: 4px; cursor: pointer;">
            <?php _e( 'Manage Filter Items', 'woocommerce' ); ?>
        </button>

        <!-- Collapsible Accordion Content -->
        <div class="accordion-content" style="display: none;">
            <!-- Search box for filter labels inside the accordion -->
            <input type="text" id="filter-search" placeholder="<?php _e( 'Search filter labels...', 'woocommerce' ); ?>" style="width: 100%; padding: 3px; margin-bottom: 0; border: 0; border-radius: 4px;">

            <table class="widefat" style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
                <thead>
                    <tr style="background-color: #f1f1f1; color: #333;">
                        <th style="padding: 10px 15px; text-align: left;"><?php _e( 'Filter Label English', 'woocommerce' ); ?></th>
                        <th style="padding: 10px 15px; text-align: left;"><?php _e( 'Filter Label Arabic', 'woocommerce' ); ?></th>
                        <th style="padding: 10px 15px; text-align: left;"><?php _e( 'Value (English)', 'woocommerce' ); ?></th>
                        <th style="padding: 10px 15px; text-align: left;"><?php _e( 'Value (Arabic)', 'woocommerce' ); ?></th>
                        <th style="padding: 10px 15px; text-align: left;"><?php _e( 'Action', 'woocommerce' ); ?></th>
                    </tr>
                </thead>
                <tbody class="filter-items-body" id="filter-items-body" style="max-height: 500px; overflow: hidden;">
                    <?php 
                    // Get all 'filter' custom post type posts
                    $filters = get_posts( array(
                        'post_type' => 'filter',  // Custom post type 'filter'
                        'posts_per_page' => -1,   // Get all filter posts
                        'post_status' => 'publish', // Only published posts
                    ) );

                    // Loop through all the filter items and display them in the table
                    foreach ( $filters as $filter ) :
                        // Retrieve the saved value for each filter from the custom field
                        $saved_value = '';
                        foreach ($existing_custom_fields as $field) {
                            // Find the matching filter label (post title) in the existing saved fields
                            if (strpos($field, $filter->post_title . '~') === 0) {
                                $saved_value = $field;
                                break;
                            }
                        }

                        // Split the saved value into English and Arabic values
                        $saved_english_value = '';
                        $saved_arabic_value = '';
                        if (!empty($saved_value)) {
                            $value_parts = explode(':', $saved_value);
                            if (isset($value_parts[1])) {
                                $values = explode('|', $value_parts[1]);
                                $saved_english_value = isset($values[0]) ? $values[0] : '';
                                $saved_arabic_value = isset($values[1]) ? $values[1] : '';
                            }
                        }
                        ?>
                        <tr class="filter-item-row" style="background-color: #fff; border-bottom: 1px solid #ddd;">
                            <td style="padding: 5px;">
                                <?php echo esc_html( $filter->post_title ); ?>
                            </td>
                            <td style="padding: 5px;">
                                <?php 
                                // Get the Arabic label from ACF for this filter
                                $arabic_label = get_field('arabic', $filter->ID); 
                                echo esc_html( $arabic_label );
                                ?>
                            </td>
                            <td style="padding:0;">
                                <input type="text" name="filter_values[<?php echo esc_attr( $filter->ID ); ?>][english]" class="filter_english_value" value="<?php echo esc_attr( $saved_english_value ); ?>" style="width: 95%; margin:5px; padding: 2px 5px; border: 0; border-radius: 4px;">
                            </td>
                            <td style="padding:0; text-align: right;">
                                <input type="text" name="filter_values[<?php echo esc_attr( $filter->ID ); ?>][arabic]" class="filter_arabic_value" value="<?php echo esc_attr( $saved_arabic_value ); ?>" style="width: 95%; margin:5px; padding:2px  5px; border: 0; border-radius: 4px; text-align: right;">
                            </td>
                            <td style="padding: 0;">
                                <!-- Clear button for each row -->
                                <button type="button" class="clear-row" style="background-color: #e74c3c; color: #fff; padding: 5px 10px; border: none; border-radius: 4px; cursor: pointer;">
                                    <?php _e( 'Clear', 'woocommerce' ); ?>
                                </button>
                            </td>
                        </tr>
                        <?php
                    endforeach;
                    ?>
                </tbody>
            </table>
        </div>
    </div>

    <script type="text/javascript">
        jQuery(document).ready(function($) {
            // Filter rows based on the search box input
            $('#filter-search').on('input', function() {
                var searchTerm = $(this).val().toLowerCase();
                
                // Loop through each row and show/hide based on search term
                $('.filter-item-row').each(function() {
                    var filterLabel = $(this).find('td:first').text().toLowerCase();
                    if (filterLabel.indexOf(searchTerm) !== -1) {
                        $(this).show(); // Show the row if it matches the search term
                    } else {
                        $(this).hide(); // Hide the row if it does not match
                    }
                });
            });

            // Toggle the visibility of the accordion content when the button is clicked
            $('.accordion').click(function(e) {
                e.preventDefault(); // Prevent default button behavior (refresh)
                $(this).next('.accordion-content').slideToggle();
            });

            // Add green background color to rows with values
            $('.filter-item-row').each(function() {
                var englishValue = $(this).find('.filter_english_value').val();
                var arabicValue = $(this).find('.filter_arabic_value').val();

                // If both values are not empty, add a green background color to the row
                if (englishValue.trim() !== '' && arabicValue.trim() !== '') {
                    $(this).css('background-color', '#d4edda'); // Green background color
                }
            });

            // Listen for changes in the input fields to dynamically update row color
            $('.filter_english_value, .filter_arabic_value').on('input', function() {
                var row = $(this).closest('tr');
                var englishValue = row.find('.filter_english_value').val();
                var arabicValue = row.find('.filter_arabic_value').val();

                if (englishValue.trim() !== '' && arabicValue.trim() !== '') {
                    row.css('background-color', '#d4edda'); // Green background color
                } else {
                    row.css('background-color', '#fff'); // Reset to default (white) if either value is empty
                }
            });

            // Clear values and reset background color for individual rows
            $('.clear-row').click(function() {
                var row = $(this).closest('tr');
                row.find('.filter_english_value').val('');
                row.find('.filter_arabic_value').val('');
                row.css('background-color', '#fff'); // Reset background to white
            });
        });
    </script>
    <?php
}
add_action( 'woocommerce_product_options_general_product_data', 'add_filter_items_table_to_product' );

// Save the filter items when the product is saved
function save_filter_items_to_product( $post_id ) {
    // Check if this is a product and if we're not autosaving
    if ( 'product' !== get_post_type( $post_id ) || defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
        return;
    }

    // Check if the custom fields data exists
    if ( isset( $_POST['filter_values'] ) ) {
        $custom_fields = array();

        // Loop through each filter and save the values
        foreach ( $_POST['filter_values'] as $filter_id => $values ) {
            // Ensure both English and Arabic values are provided and not empty
            if ( !empty( $values['english'] ) && !empty( $values['arabic'] ) ) {
                // Fetch the filter label and Arabic label from ACF
                $filter_label = get_the_title( $filter_id );
                $arabic_label = get_field('arabic', $filter_id); // ACF field 'arabic'

                // Construct the value in the format "Filter Label~Arabic Label:english|arabic"
                //$custom_fields[] = $filter_label . '~' . $arabic_label . ':' . sanitize_text_field( $values['english'] ) . '|' . sanitize_text_field( $values['arabic'] );
           
                $custom_fields[] = $filter_label . '~:' . sanitize_text_field( $values['english'] ) . '|' . sanitize_text_field( $values['arabic'] );
            }
        }

        // Store all filter values as a single string without spaces after commas
        if ( !empty( $custom_fields ) ) {
            // Remove spaces after commas
            $custom_fields_string = implode( ',', $custom_fields );
            update_post_meta( $post_id, '_filter_items', $custom_fields_string );
        } else {
            // If no values are selected, remove the custom field
            delete_post_meta( $post_id, '_filter_items' );
        }
    }
}
add_action( 'save_post', 'save_filter_items_to_product' );


/////////////////////////FILTER CUSTOM FIELD END///////////////////////////////////

//WISHLIST
// Register REST API Routes
add_action('rest_api_init', function() {
    // Add route for adding product to wishlist with user_id passed as URL parameter
    register_rest_route('wishlist/v1', '/add/(?P<user_id>\d+)/', [
        'methods' => 'POST',
        'callback' => 'add_product_to_wishlist',
        'permission_callback' => 'wishlist_permission_check',
        'args' => [
            'user_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ],
            'product_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ]
        ]
    ]);

    // Add route for removing product from wishlist with user_id passed as URL parameter
    register_rest_route('wishlist/v1', '/remove/(?P<user_id>\d+)/', [
        'methods' => 'POST',
        'callback' => 'remove_product_from_wishlist',
        'permission_callback' => 'wishlist_permission_check',
        'args' => [
            'user_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ],
            'product_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ]
        ]
    ]);

    // Add route for getting the wishlist of a specific user
    register_rest_route('wishlist/v1', '/get/(?P<user_id>\d+)/', [
        'methods' => 'GET',
        'callback' => 'get_wishlist_products',
        'permission_callback' => 'wishlist_permission_check',
    ]);
});

// Permission check function for nonce validation and user permissions
function wishlist_permission_check($request) {
    $user_id = $request->get_param('user_id');

    // Check if the current user is logged in
    if (get_current_user_id() == 0) {
        return new WP_REST_Response('You must be logged in to manage your wishlist', 401);
    }

    // Check nonce validity for REST API requests
    if (!isset($_SERVER['HTTP_X_WP_NONCE']) || !wp_verify_nonce($_SERVER['HTTP_X_WP_NONCE'], 'wp_rest')) {
        return new WP_REST_Response('Nonce is invalid or expired', 403); // Forbidden
    }

    // Check if the logged-in user matches the user ID in the URL (for access control)
    if (get_current_user_id() != $user_id) {
        return new WP_REST_Response('You are not allowed to modify another user\'s wishlist', 403); // Forbidden
    }

    return true;
}

// Function to add a product to the wishlist
function add_product_to_wishlist($data) {
    $user_id = $data['user_id']; // Get the user_id from the URL
    $product_id = $data['product_id']; // Get the product_id from the request body

    // Get current wishlist from user meta
    $wishlist = get_user_meta($user_id, '_wishlist', true);
    if (!$wishlist) {
        $wishlist = [];
    }

    // Add product ID to the wishlist if it's not already added
    if (!in_array($product_id, $wishlist)) {
        $wishlist[] = $product_id;
        update_user_meta($user_id, '_wishlist', $wishlist);
    }

    // Reindex the array to remove associative keys
    $wishlist = array_values($wishlist);

    // Fetch full product details for each product in the updated wishlist
    $products_details = [];

    foreach ($wishlist as $remaining_product_id) {
        $product = wc_get_product($remaining_product_id); // Get the WooCommerce product object

        if ($product) {
            // Get featured image URL and alt text
            $featured_image_id = $product->get_image_id();
            $featured_image_url = get_the_post_thumbnail_url($remaining_product_id, 'full'); // Fetch the full-size image
            $alt_text = get_post_meta($featured_image_id, '_wp_attachment_image_alt', true); // Get alt text for the image

            // Collect product details
            $product_details = [
                'id' => $product->get_id(),
                'name' => $product->get_name(),
                'slug' => $product->get_slug(),
                'date_created' => $product->get_date_created()->date('c'),
                'date_modified' => $product->get_date_modified()->date('c'),
                'status' => $product->get_status(),
                'featured' => $product->get_featured(),
                'catalog_visibility' => $product->get_catalog_visibility(),
                'description' => $product->get_description(),
                'short_description' => $product->get_short_description(),
                'sku' => $product->get_sku(),
                'price' => $product->get_price(),
                'regular_price' => $product->get_regular_price(),
                'sale_price' => $product->get_sale_price(),
                'tax_status' => $product->get_tax_status(),
                'stock_status' => $product->get_stock_status(),
                'stock_quantity' => $product->get_stock_quantity(),
                'weight' => $product->get_weight(),
                'dimensions' => $product->get_dimensions(),
                'upsell_ids' => $product->get_upsell_ids(),
                'cross_sell_ids' => $product->get_cross_sell_ids(),
                'category_ids' => $product->get_category_ids(),
                'tag_ids' => $product->get_tag_ids(),
                'image_id' => $featured_image_id,
                'gallery_image_ids' => $product->get_gallery_image_ids(),
                'rating' => $product->get_average_rating(),
                'review_count' => $product->get_review_count(),
                'meta' => get_post_meta($product->get_id()),
                'featured_image_details' => [
                    'src' => $featured_image_url, // Image URL
                    'alt' => $alt_text // Image alt text
                ]
            ];

            // Append product details to the list
            $products_details[] = $product_details;
        }
    }

    // Return the updated list of products in the wishlist as response
    return new WP_REST_Response($products_details, 200);
}

// Function to remove a product from the wishlist
function remove_product_from_wishlist($data) {
    $user_id = $data['user_id']; // Get the user_id from the URL
    $product_id = $data['product_id']; // Get the product_id from the request body

    // Get current wishlist from user meta
    $wishlist = get_user_meta($user_id, '_wishlist', true);
    if ($wishlist && in_array($product_id, $wishlist)) {
        // Remove the product from wishlist
        $wishlist = array_diff($wishlist, [$product_id]);
        update_user_meta($user_id, '_wishlist', $wishlist);

        // Reindex the array to remove associative keys
        $wishlist = array_values($wishlist);

        // Fetch full product details for each product in the updated wishlist
        $products_details = [];

        foreach ($wishlist as $remaining_product_id) {
            $product = wc_get_product($remaining_product_id); // Get the WooCommerce product object

            if ($product) {
                // Get featured image URL and alt text
                $featured_image_id = $product->get_image_id();
                $featured_image_url = get_the_post_thumbnail_url($remaining_product_id, 'full'); // Fetch the full-size image
                $alt_text = get_post_meta($featured_image_id, '_wp_attachment_image_alt', true); // Get alt text for the image

                // Collect product details
                $product_details = [
                    'id' => $product->get_id(),
                    'name' => $product->get_name(),
                    'slug' => $product->get_slug(),
                    'date_created' => $product->get_date_created()->date('c'),
                    'date_modified' => $product->get_date_modified()->date('c'),
                    'status' => $product->get_status(),
                    'featured' => $product->get_featured(),
                    'catalog_visibility' => $product->get_catalog_visibility(),
                    'description' => $product->get_description(),
                    'short_description' => $product->get_short_description(),
                    'sku' => $product->get_sku(),
                    'price' => $product->get_price(),
                    'regular_price' => $product->get_regular_price(),
                    'sale_price' => $product->get_sale_price(),
                    'tax_status' => $product->get_tax_status(),
                    'stock_status' => $product->get_stock_status(),
                    'stock_quantity' => $product->get_stock_quantity(),
                    'weight' => $product->get_weight(),
                    'dimensions' => $product->get_dimensions(),
                    'upsell_ids' => $product->get_upsell_ids(),
                    'cross_sell_ids' => $product->get_cross_sell_ids(),
                    'category_ids' => $product->get_category_ids(),
                    'tag_ids' => $product->get_tag_ids(),
                    'image_id' => $featured_image_id,
                    'gallery_image_ids' => $product->get_gallery_image_ids(),
                    'rating' => $product->get_average_rating(),
                    'review_count' => $product->get_review_count(),
                    'meta' => get_post_meta($product->get_id()),
                    'featured_image_details' => [
                        'src' => $featured_image_url, // Image URL
                        'alt' => $alt_text // Image alt text
                    ]
                ];

                // Append product details to the list
                $products_details[] = $product_details;
            }
        }

        // Return the updated list of products in the wishlist as response
        return new WP_REST_Response($products_details, 200);
    }

    return new WP_REST_Response('Product not found in wishlist', 404); // If product is not found
}

// Function to get the products in a user's wishlist with full details
function get_wishlist_products($data) {
    $user_id = $data['user_id']; // Get the user_id from the URL

    // Get current wishlist from user meta
    $wishlist = get_user_meta($user_id, '_wishlist', true);
    if (!$wishlist) {
        $wishlist = [];
    }

    // Reindex the array to remove associative keys
    $wishlist = array_values($wishlist);

    // Fetch full product details for each product in the wishlist
    $products_details = [];

    foreach ($wishlist as $product_id) {
        $product = wc_get_product($product_id); // Get the WooCommerce product object

        if ($product) {
            // Get featured image URL and alt text
            $featured_image_id = $product->get_image_id();
            $featured_image_url = get_the_post_thumbnail_url($product_id, 'full'); // Fetch the full-size image
            $alt_text = get_post_meta($featured_image_id, '_wp_attachment_image_alt', true); // Get alt text for the image

            // Collect product details
            $product_details = [
                'id' => $product->get_id(),
                'name' => $product->get_name(),
                'slug' => $product->get_slug(),
                'date_created' => $product->get_date_created()->date('c'),
                'date_modified' => $product->get_date_modified()->date('c'),
                'status' => $product->get_status(),
                'featured' => $product->get_featured(),
                'catalog_visibility' => $product->get_catalog_visibility(),
                'description' => $product->get_description(),
                'short_description' => $product->get_short_description(),
                'sku' => $product->get_sku(),
                'price' => $product->get_price(),
                'regular_price' => $product->get_regular_price(),
                'sale_price' => $product->get_sale_price(),
                'tax_status' => $product->get_tax_status(),
                'stock_status' => $product->get_stock_status(),
                'stock_quantity' => $product->get_stock_quantity(),
                'weight' => $product->get_weight(),
                'dimensions' => $product->get_dimensions(),
                'upsell_ids' => $product->get_upsell_ids(),
                'cross_sell_ids' => $product->get_cross_sell_ids(),
                'category_ids' => $product->get_category_ids(),
                'tag_ids' => $product->get_tag_ids(),
                'image_id' => $featured_image_id,
                'gallery_image_ids' => $product->get_gallery_image_ids(),
                'rating' => $product->get_average_rating(),
                'review_count' => $product->get_review_count(),
                'meta' => get_post_meta($product->get_id()),
                'featured_image_details' => [
                    'src' => $featured_image_url, // Image URL
                    'alt' => $alt_text // Image alt text
                ]
            ];

            // Append product details to the list
            $products_details[] = $product_details;
        }
    }

    // Return the full product details as response
    return new WP_REST_Response($products_details, 200);
}


//GET https://ardalmarmoom.com/wp-json/wishlist/v1/add/46?consumer_key=ck_2d04135ce56ef79ee425fed2269cc101bea5804f&consumer_secret=cs_588ff4bc83df6125ba5d3e0aa383679ff7eeab11
//
// //{
//   "product_id": 2656
// }

// Add product to wishlist: POST /wp-json/wishlist/v1/add/{user_id}/
// Remove product from wishlist: POST /wp-json/wishlist/v1/remove/{user_id}/
// Get wishlist products: GET /wp-json/wishlist/v1/get/{user_id}/


////////////////////////////////////AUTH//////////////////////////




//FORGOT PASSWORD: REQUEST

// Register the REST API route for sending the password reset email
function register_password_reset_routes() {
    register_rest_route('password-reset/v1', '/request', array(
        'methods' => 'POST',
        'callback' => 'handle_password_reset_request',
        'permission_callback' => '__return_true', // No authentication required for this endpoint
    ));
}

add_action('rest_api_init', 'register_password_reset_routes');

// Handle the password reset request
function handle_password_reset_request(WP_REST_Request $request) {
    $email = sanitize_email($request->get_param('email'));

    if (!is_email($email)) {
        return new WP_REST_Response(array('message' => 'Invalid email address.'), 400);
    }

    // Check if user exists with this email
    $user = get_user_by('email', $email);

    if (!$user) {
        return new WP_REST_Response(array('message' => 'No user found with this email address.'), 404);
    }

    // Generate a token and its expiration time (1 minute)
    $token = bin2hex(random_bytes(16)); // Generate a random token
    $expires_at = time() + 1800; // Token is valid for 30 minutes

    // Store the token and expiration time in the user meta
    update_user_meta($user->ID, '_password_reset_token', $token);
    update_user_meta($user->ID, '_password_reset_token_expiry', $expires_at);

    // Send response with token to the frontend
    return new WP_REST_Response(array('message' => 'Token generated successfully.', 'token' => $token, 'email' => $email), 200);
}


///wp-json/password-reset/v1/request


//Verify Token and Reset Password (POST Request)

// Register the REST API route for verifying the token and resetting the password
function register_verify_token_routes() {
    register_rest_route('password-reset/v1', '/reset', array(
        'methods' => 'POST',
        'callback' => 'verify_token_and_reset_password',
        'permission_callback' => '__return_true', // No authentication required for this endpoint
    ));
}

add_action('rest_api_init', 'register_verify_token_routes');

// Handle the token verification and password reset
function verify_token_and_reset_password(WP_REST_Request $request) {
    $email = sanitize_email($request->get_param('email'));
    $token = sanitize_text_field($request->get_param('token'));
    $new_password = sanitize_text_field($request->get_param('newPassword'));

    if (!is_email($email)) {
        return new WP_REST_Response(array('message' => 'Invalid email address.'), 400);
    }

    // Get user by email
    $user = get_user_by('email', $email);

    if (!$user) {
        return new WP_REST_Response(array('message' => 'User not found.'), 404);
    }

    // Get stored token and expiration time
    $stored_token = get_user_meta($user->ID, '_password_reset_token', true);
    $expires_at = get_user_meta($user->ID, '_password_reset_token_expiry', true);

    // Check if token exists and is valid
    if (!$stored_token || $stored_token !== $token) {
        return new WP_REST_Response(array('message' => 'Invalid token.'), 400);
    }

    if ($expires_at < time()) {
        return new WP_REST_Response(array('message' => 'Token expired.'), 400);
    }

    // Reset password
    wp_set_password($new_password, $user->ID);

    // Clear token and expiration
    delete_user_meta($user->ID, '_password_reset_token');
    delete_user_meta($user->ID, '_password_reset_token_expiry');

    return new WP_REST_Response(array('message' => 'Password reset successfully.'), 200);
}


//POST /wp-json/password-reset/v1/reset




//LOGIN

// Hook into the REST API initialization
add_action('rest_api_init', function () {
    register_rest_route('custom/v1', '/login', [
        'methods' => 'POST',
        'callback' => 'custom_login_user',
        'permission_callback' => '__return_true', // You can adjust the permissions as needed
    ]);
});

// Function to handle login request
function custom_login_user(WP_REST_Request $request) {
    // Get the email and password from the request
    $email = $request->get_param('email');
    $password = $request->get_param('password');

    // Validate email and password
    if (empty($email) || empty($password)) {
        return new WP_REST_Response('Email and password are required.', 400);
    }

    // Check if user exists by email
    $user = get_user_by('email', $email);
    if (!$user) {
        return new WP_REST_Response('User not found with that email address.', 404);
    }

    // Verify the password
    if (!wp_check_password($password, $user->user_pass, $user->ID)) {
        return new WP_REST_Response('Incorrect password.', 403);
    }

    // Check if the user has the "customer" role (WooCommerce role)
    if (!in_array('customer', (array) $user->roles)) {
        return new WP_REST_Response('User is not a customer.', 403);
    }

    // Generate authentication token (JWT or cookie based)
    $token = wp_create_nonce('wp_rest');  // This is a simple nonce for demo purposes. You can use JWT for better security.

    // Return success with user data
    return new WP_REST_Response([
        'message' => 'Login successful.',
        'user_id' => $user->ID,
        'user_email' => $user->user_email,
        'role' => $user->roles[0],  // Return the role of the user
        'token' => $token,  // You can use JWT or a custom session token here
    ], 200);
}



//-----------------

// Hook into the REST API initialization
add_action('rest_api_init', function () {
    register_rest_route('custom/v1', '/validate-token', [
        'methods' => 'POST',
        'callback' => 'validate_token',
        'permission_callback' => '__return_true', // Adjust permission callback as needed
    ]);
});

// Function to handle token validation
function validate_token(WP_REST_Request $request) {
    $token = $request->get_param('token');
    
    // In a real-world scenario, you would validate the token here.
    // For example, you can check if it's a valid JWT and extract user information.
    // For nonce-based token, you could verify it with wp_verify_nonce().

    // Example: If using JWT, you would decode and verify it here.
    if (!$token) {
        return new WP_REST_Response('No token provided.', 400);
    }

    // Dummy validation (replace with your JWT or other token validation logic)
    // Check if the token exists (as a simple example)
    if (wp_verify_nonce($token, 'wp_rest')) {
        return new WP_REST_Response('Token is valid.', 200);
    }

    return new WP_REST_Response('Invalid token.', 403);
}


//PASSWORD CHANGE

// Register the custom endpoint for password change
function custom_password_change_endpoint() {
    register_rest_route( 'custom/v1', '/change-password/', array(
        'methods'  => 'POST',
        'callback' => 'change_user_password',
    ));
}
add_action( 'rest_api_init', 'custom_password_change_endpoint' );

// Callback function to handle the password change
function change_user_password( WP_REST_Request $request ) {
    // Get parameters from the request
    $user_id = $request->get_param( 'user_id' );
    $old_password = sanitize_text_field( $request->get_param( 'old_password' ) );
    $new_password = sanitize_text_field( $request->get_param( 'new_password' ) );

    // Check if the user exists
    $user = get_user_by( 'id', $user_id );
    if ( ! $user ) {
        return new WP_Error( 'invalid_user', 'The specified user does not exist.', array( 'status' => 400 ) );
    }

    // Check if the old password is correct
    if ( ! wp_check_password( $old_password, $user->user_pass, $user_id ) ) {
        return new WP_Error( 'incorrect_password', 'The old password is incorrect.', array( 'status' => 400 ) );
    }

    // Validate the new password
    if ( empty( $new_password ) ) {
        return new WP_Error( 'invalid_password', 'The new password cannot be empty.', array( 'status' => 400 ) );
    }

    // Update the password
    wp_set_password( $new_password, $user_id );

    // Return success response
    return new WP_REST_Response( 'Password changed successfully', 200 );
}


//https://admin.wellness4u.in/wp-json/custom/v1/change-password/
// {
//     "user_id":14,
//     "old_password": "123456",
//       "new_password": "123456789"
// }
// 


//====================================REST API FOR CUSTOM PRODUCTS///////////////



//TEST
add_action('rest_api_init', 'register_custom_product_api_endpoint');

function register_custom_product_api_endpoint() {
    // Register a new route for fetching WooCommerce products.
    register_rest_route('custom/v1', '/products/', array(
        'methods' => 'GET',
        'callback' => 'get_custom_products',
        'args' => array(
            'per_page' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param) && $param > 0 && $param <= 2000; // Ensure valid range up to 2000
                },
                'default' => 10, // Set default value to 10 products per page.
            ),
            'main_categories_new' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_array($param); // Expecting an array of category IDs.
                },
            ),
            'sub_categories_new' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_array($param); // Expecting an array of category IDs.
                },
            ),
            'child_categories_new' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_array($param); // Expecting an array of category IDs.
                },
            ),
            'brands_new' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_array($param); // Expecting an array of brand IDs.
                },
                'default' => array(), // Default to an empty array if not passed.
            ),
            'filter_items' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_array($param); // Expecting an array of filter strings (e.g., Family~:Mauser).
                },
            ),
            'order_by' => array(
                'validate_callback' => function($param, $request, $key) {
                    return in_array($param, ['price', 'name']); // Allow 'price' and 'name' for ordering.
                },
                'default' => 'name', // Default to ordering by name.
            ),
            'order' => array(
                'validate_callback' => function($param, $request, $key) {
                    return in_array(strtolower($param), ['asc', 'desc']); // Allow 'asc' or 'desc' for order.
                },
                'default' => 'asc', // Default to ascending order.
            ),
            'min_price' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param); // Ensure the value is a valid number.
                },
            ),
            'max_price' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param); // Ensure the value is a valid number.
                },
            ),
            '_offer_deal' => array( // New argument for _offer_deal
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param) && in_array($param, ['yes', 'no']); // Expecting 'yes' or 'no'.
                },
            ),
            '_star_product' => array( 
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param) && in_array($param, ['yes', 'no']); // Expecting 'yes' or 'no'.
                },
            ),
            'slug' => array( // New argument for slug
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param); // Expecting a string (slug).
                },
            ),
        ),
    ));
}

// Callback function to retrieve products with meta filtering.
function get_custom_products(WP_REST_Request $request) {
    // Get the per_page parameter from the request.
    $per_page = $request->get_param('per_page') ? $request->get_param('per_page') : 10; // Default to 10 if not provided.

    // Get filter parameters
    $main_categories_new = $request->get_param('main_categories_new');
    $sub_categories_new = $request->get_param('sub_categories_new');
    $child_categories_new = $request->get_param('child_categories_new');
    $brands_new = $request->get_param('brands_new');
    $filter_items = $request->get_param('filter_items');
    $order_by = $request->get_param('order_by'); // 'price' or 'name' for ordering
    $order = $request->get_param('order'); // 'asc' or 'desc'
    $min_price = $request->get_param('min_price');
    $max_price = $request->get_param('max_price');
    $_offer_deal = $request->get_param('_offer_deal'); // _offer_deal parameter
    $_star_product = $request->get_param('_star_product'); 
    $slug = $request->get_param('slug'); // Slug parameter

    // Set up the query args.
    $args = array(
        'post_type' => 'product',
        'posts_per_page' => $per_page, // Set posts per page to the per_page parameter value.
        'post_status' => 'publish',
    );

    // If the slug parameter is provided, filter by product slug.
    if ($slug) {
        $args['name'] = $slug; // Filter by the product slug.
    }

    // Initialize meta_query.
    $meta_query = array('relation' => 'AND');

    // Add meta query for 'main_categories_new' if provided.
    if ($main_categories_new) {
        $meta_query[] = array(
            'key'     => 'main_categories_new', // Custom field meta key
            'value'   => $main_categories_new,
            'compare' => 'IN',
        );
    }

    // Add meta query for 'sub_categories_new' if provided.
    if ($sub_categories_new) {
        $meta_query[] = array(
            'key'     => 'sub_categories_new',
            'value'   => $sub_categories_new,
            'compare' => 'IN',
        );
    }

    // Add meta query for 'child_categories_new' if provided.
    if ($child_categories_new) {
        $meta_query[] = array(
            'key'     => 'child_categories_new',
            'value'   => $child_categories_new,
            'compare' => 'IN',
        );
    }

    // Add meta query for 'brands_new' if provided.
    if ($brands_new) {
        $meta_query[] = array(
            'key'     => 'brands_new',
            'value'   => $brands_new,
            'compare' => 'IN',
        );
    }

    // Add meta query for '_offer_deal' if provided.
    if ($_offer_deal) {
        $meta_query[] = array(
            'key'     => '_offer_deal',
            'value'   => $_offer_deal,
            'compare' => '=', // Exact match 'no' or 'yes'
        );
    }


    if ($_star_product) {
        $meta_query[] = array(
            'key'     => '_star_product',
            'value'   => $_star_product,
            'compare' => '=', // Exact match 'no' or 'yes'
        );
    }

    // Add meta query for '_filter_items' if provided.
    if ($filter_items) {
        // Initialize a sub-query to handle multiple values for the same filter key (OR relation)
        $filter_meta_query = array('relation' => 'OR');
        
        foreach ($filter_items as $filter) {
            // Split the filter into attribute and value
            list($attribute, $value) = explode('~:', $filter);

            // Add a condition for the filter item in the '_filter_items' field
            $filter_meta_query[] = array(
                'key'     => '_filter_items', // Custom field meta key
                'value'   => $attribute . '~:' . $value, // Match the exact 'Attribute~:Value'
                'compare' => 'LIKE', // Use LIKE to check if this exists in the serialized string.
            );
        }

        // Add the filter_meta_query to the main meta_query
        $meta_query[] = $filter_meta_query;
    }

    // Add the meta_query to the arguments if any meta filters are set.
    if (count($meta_query) > 1) {
        $args['meta_query'] = $meta_query;
    }

    // Add price range filtering (min_price and max_price).
    if ($min_price || $max_price) {
        $price_query = array();

        if ($min_price) {
            $price_query[] = array(
                'key'     => '_price', // The meta key for price.
                'value'   => $min_price,
                'compare' => '>=', // Greater than or equal to the min price.
                'type'    => 'NUMERIC',
            );
        }

        if ($max_price) {
            $price_query[] = array(
                'key'     => '_price', // The meta key for price.
                'value'   => $max_price,
                'compare' => '<=', // Less than or equal to the max price.
                'type'    => 'NUMERIC',
            );
        }

        // Add price filtering to the main meta_query.
        $args['meta_query'][] = $price_query;
    }

    // Add ordering logic.
    if ($order_by == 'price') {
        $args['orderby'] = 'meta_value_num'; // Order by numerical meta value (price).
        $args['order'] = strtoupper($order); // Either 'ASC' or 'DESC'.
        $args['meta_key'] = '_price'; // The meta key for price.
    } elseif ($order_by == 'name') {
        $args['orderby'] = 'title'; // Order alphabetically by product name.
        $args['order'] = strtoupper($order); // Either 'ASC' or 'DESC'.
    }

    // Query the products.
    $query = new WP_Query($args);
    $products = array();

    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $product = wc_get_product(get_the_ID());

            // Get all product meta data
            $all_meta_data = get_post_meta($product->get_id());

            // Clean up the meta data (if needed) by removing unnecessary data like empty or default values.
            $meta_data = array();
            foreach ($all_meta_data as $key => $value) {
                if (empty($value) || $key === '_edit_lock' || $key === '_edit_last') {
                    continue; // Remove unwanted fields
                }
                $meta_data[] = array(
                    'id' => $key,
                    'key' => $key,
                    'value' => is_array($value) && count($value) === 1 ? $value[0] : $value
                );
            }

            // Get product images (main image + gallery images)
            $main_image_url = wp_get_attachment_url($product->get_image_id());
            $gallery_image_urls = array();
            $gallery_ids = $product->get_gallery_image_ids();
            
            if ($gallery_ids) {
                foreach ($gallery_ids as $image_id) {
                    $gallery_image_urls[] = wp_get_attachment_url($image_id);
                }
            }

            // Add relevant product data to response, including all meta data and images.
            $products[] = array(
                'id' => $product->get_id(),
                'name' => $product->get_name(),
                'slug' => $product->get_slug(),
                'date_created' => get_the_date(DATE_ISO8601),
                'date_modified' => get_the_modified_date(DATE_ISO8601),
                'status' => $product->get_status(),
                'featured' => $product->get_featured(),
                'catalog_visibility' => $product->get_catalog_visibility(),
                'description' => $product->get_description(),
                'short_description' => $product->get_short_description(),
                'sku' => $product->get_sku(),
                'global_unique_id' => $product->get_id(),
                'price' => $product->get_price(),
                'regular_price' => $product->get_regular_price(),
                'sale_price' => $product->get_sale_price(),
                'date_on_sale_from' => $product->get_date_on_sale_from(),
                'date_on_sale_to' => $product->get_date_on_sale_to(),
                'total_sales' => $product->get_total_sales(),
                'tax_status' => $product->get_tax_status(),
                'tax_class' => $product->get_tax_class(),
                'manage_stock' => $product->managing_stock(),
                'stock_quantity' => $product->get_stock_quantity(),
                'stock_status' => $product->get_stock_status(),
                'backorders' => $product->get_backorders(),
                'low_stock_amount' => $product->get_low_stock_amount(),
                'sold_individually' => $product->get_sold_individually(),
                'weight' => $product->get_weight(),
                'length' => $product->get_length(),
                'width' => $product->get_width(),
                'height' => $product->get_height(),
                'upsell_ids' => $product->get_upsell_ids(),
                'cross_sell_ids' => $product->get_cross_sell_ids(),
                'parent_id' => $product->get_parent_id(),
                'reviews_allowed' => $product->get_reviews_allowed(),
                'purchase_note' => $product->get_purchase_note(),
                'attributes' => $product->get_attributes(),
                'default_attributes' => $product->get_default_attributes(),
                'menu_order' => $product->get_menu_order(),
                'post_password' => $product->get_post_password(),
                'virtual' => $product->get_virtual(),
                'downloadable' => $product->get_downloadable(),
                'category_ids' => wp_get_post_terms($product->get_id(), 'product_cat', array('fields' => 'ids')),
                'tag_ids' => wp_get_post_terms($product->get_id(), 'product_tag', array('fields' => 'ids')),
                'shipping_class_id' => $product->get_shipping_class_id(),
                'downloads' => $product->get_downloads(),
                'image_id' => $product->get_image_id(),
                'gallery_image_ids' => $product->get_gallery_image_ids(),
                'download_limit' => $product->get_download_limit(),
                'download_expiry' => $product->get_download_expiry(),
                'rating_counts' => $product->get_rating_counts(),
                'average_rating' => $product->get_average_rating(),
                'review_count' => $product->get_review_count(),
                'cogs_value' => $product->get_cogs_value(),
                'meta_data' => $meta_data,
                'images' => array(
                    'featured' => array(
                        'id' => $product->get_image_id(),
                        'url' => $main_image_url,
                        'width' => getimagesize($main_image_url)[0],
                        'height' => getimagesize($main_image_url)[1],
                        'alt' => get_post_meta($product->get_image_id(), '_wp_attachment_image_alt', true)
                    ),
                    'gallery' => array_map(function($image_id) {
                        return array(
                            'id' => $image_id,
                            'url' => wp_get_attachment_url($image_id),
                            'width' => getimagesize(wp_get_attachment_url($image_id))[0],
                            'height' => getimagesize(wp_get_attachment_url($image_id))[1],
                            'alt' => get_post_meta($image_id, '_wp_attachment_image_alt', true)
                        );
                    }, $gallery_ids)
                )
            );
        }

        // Reset Post Data after custom query.
        wp_reset_postdata();
    }

    // Return the products as a response.
    return rest_ensure_response($products);
}


///////////////



//CUSTOM FIELD FOR COUPON CODE
// Add Maximum Amount Field to Coupon Admin Page
add_action('woocommerce_coupon_options', 'add_maximum_amount_coupon_field', 10, 1);
function add_maximum_amount_coupon_field($coupon_id) {
    woocommerce_wp_text_input(array(
        'id' => 'maximum_amount_field',
        'label' => __('Maximum Amount', 'your-textdomain'),
        'description' => __('Enter the maximum amount for this coupon', 'your-textdomain'),
        'desc_tip' => true,
    ));
}

// Save Maximum Amount Field Value
add_action('woocommerce_coupon_options_save', 'save_maximum_amount_coupon_field', 10, 1);
function save_maximum_amount_coupon_field($coupon_id) {
    // Get the value of the maximum amount field from the POST data
    $maximum_amount = isset($_POST['maximum_amount_field']) ? sanitize_text_field($_POST['maximum_amount_field']) : '';
    
    // Save the maximum amount to the coupon's meta data
    update_post_meta($coupon_id, 'maximum_amount_field', $maximum_amount);
}

// Register Maximum Amount Field in REST API meta_data
add_filter('woocommerce_rest_prepare_shop_coupon_object', 'add_maximum_amount_to_coupon_meta_data', 10, 3);
function add_maximum_amount_to_coupon_meta_data($response, $coupon, $request) {
    $maximum_amount = get_post_meta($coupon->get_id(), 'maximum_amount_field', true);
    
    // Add the 'maximum_amount_field' to the coupon's meta_data in the REST API response
    if (!empty($maximum_amount)) {
        $response->data['meta_data'][] = [
            'key' => 'maximum_amount_field',
            'value' => $maximum_amount
        ];
    }
    
    return $response;
}

// Allow updating Maximum Amount Field via REST API
add_filter('woocommerce_rest_shop_coupon_object_query', 'allow_maximum_amount_in_coupon_rest_update', 10, 3);
function allow_maximum_amount_in_coupon_rest_update($args, $request) {
    $maximum_amount = $request->get_param('maximum_amount_field');
    
    // If maximum amount is set in the request, update the coupon's meta field
    if ($maximum_amount !== null) {
        $coupon_id = $request->get_param('id');
        update_post_meta($coupon_id, 'maximum_amount_field', sanitize_text_field($maximum_amount));
    }
    
    return $args;
}




//HIDE COUPON FIELDS


function hide_woocommerce_coupon_fields() {
    // Only load the script on the WooCommerce coupon page
 
        ?>
        <script type="text/javascript">
            jQuery(document).ready(function($) {
                // Hide the specified coupon fields
                $('#woocommerce-coupon-data .free_shipping_field').hide();
                $('.options_group .minimum_amount_field').hide();
                $('.options_group .maximum_amount_field').hide();
                $('.options_group .individual_use_field').hide();
                $('.options_group .exclude_sale_items_field').hide();
                $('.options_group .usage_limit_field').hide();
                $('.options_group .limit_usage_to_x_items_field').hide();
				 $('#woocommerce-coupon-data  .woocommerce_options_panel .options_group:nth-child(3)').hide();
				$('#usage_restriction_coupon_data .form-field:nth-child(3)').hide();
				$('#usage_restriction_coupon_data > .form-field').hide();
				$('#woocommerce-coupon-description').hide();
            });
        </script>
        <?php
    
}

// Hook to wp_footer or wp_head depending on your preference
add_action('admin_footer', 'hide_woocommerce_coupon_fields');



//MENUS
add_action('rest_api_init', function() {
    register_rest_route('custom/v1', '/menus/', [
        'methods' => 'GET',
        'callback' => 'get_menus_data',
        'permission_callback' => '__return_true', // This allows unauthenticated access, change if needed
    ]);

    // Register a route for fetching a specific menu by slug
    register_rest_route('custom/v1', '/menus/(?P<slug>[a-zA-Z0-9-_]+)', [
        'methods' => 'GET',
        'callback' => 'get_single_menu_data',
        'permission_callback' => '__return_true',
    ]);
});

// Callback function to retrieve all menus
function get_menus_data(WP_REST_Request $request) {
    // Get all registered menus
    $locations = get_nav_menu_locations();
    $menus = [];
    
    // Loop through all the registered locations
    foreach ($locations as $location => $menu_id) {
        $menu = wp_get_nav_menu_object($menu_id);
        $menus[] = [
            'id' => $menu->term_id,
            'name' => $menu->name,
            'slug' => $menu->slug,
            'location' => $location,
            'acf' => get_acf_data_for_menu($menu->term_id), // Add ACF fields for menu
        ];
    }

    return rest_ensure_response($menus);
}

// Callback function to retrieve a specific menu by slug
function get_single_menu_data(WP_REST_Request $request) {
    $slug = $request->get_param('slug');
    $menu = wp_get_nav_menu_object($slug);
    
    if (!$menu) {
        return new WP_Error('menu_not_found', 'Menu not found', ['status' => 404]);
    }

    // Get menu items
    $menu_items = wp_get_nav_menu_items($menu->term_id);
    $items = [];

    foreach ($menu_items as $item) {
        $items[] = [
            'id' => $item->ID,
            'title' => $item->title,
            'url' => $item->url,
            'parent' => $item->menu_item_parent,
            'acf' => get_acf_data_for_menu_item($item->ID), // Add ACF fields for menu item
        ];
    }

    return rest_ensure_response([
        'id' => $menu->term_id,
        'name' => $menu->name,
        'slug' => $menu->slug,
        'items' => $items,
        'acf' => get_acf_data_for_menu($menu->term_id), // Add ACF fields for menu
    ]);
}

// Function to retrieve ACF data for a menu (if any)
function get_acf_data_for_menu($menu_id) {
    $acf_data = [];

    // Get ACF fields for the menu term
    if (function_exists('get_field')) {
        $acf = get_fields('term_' . $menu_id);
        if ($acf) {
            $acf_data = $acf; // Assuming this returns an array of ACF fields
        }
    }

    return $acf_data;
}

// Function to retrieve ACF data for a menu item (if any)
function get_acf_data_for_menu_item($menu_item_id) {
    $acf_data = [];

    // Get ACF fields for the menu item
    if (function_exists('get_field')) {
        $acf = get_fields($menu_item_id);
        if ($acf) {
            $acf_data = $acf; // Assuming this returns an array of ACF fields
        }
    }

    return $acf_data;
}




//TOTAL PAY API

// Register the custom REST API endpoint
add_action('rest_api_init', function () {
    register_rest_route('custom/v1', '/totalpay-checkout', [
        'methods' => 'POST',
        'callback' => 'handle_totalpay_checkout_session',
        'permission_callback' => '__return_true', // Adjust for security in production
    ]);
});

// Function to handle the POST request to the TotalPay API
function handle_totalpay_checkout_session(WP_REST_Request $request) {
    // Capture the incoming data
    $order = $request->get_param('order');
    $customer = $request->get_param('customer');
    $billing_address = $request->get_param('billing_address');
    $card_token = $request->get_param('card_token');
    
    // Merchant credentials (replace with your actual keys)
    $merchant_key = 'cb6b074c-7b0f-11ee-9995-5af3283cdfeb'; // Test Key
    $merchant_pass = 'be80eebd9f33e214ad7019a70ffd86f9'; // Merchant password
    $payment_public_id = 'public-id-xyz'; // Replace with actual public ID
    
    // Step 1: Construct the hash string exactly as required
    // Concatenate payment_public_id + order.number + order.amount + order.currency + order.description + merchant.pass
    $hash_string = $payment_public_id . $order['number'] . $order['amount'] . $order['currency'] . $order['description'] . $merchant_pass;
    
    // Step 2: Generate the SHA1 hash and convert it to uppercase
    $hash = strtoupper(sha1($hash_string)); // SHA1 hash of the concatenated string, then uppercased
    
    // Log the hash for debugging (only in development!)
    error_log('Generated Hash: ' . $hash); // Make sure the hash looks correct in your log

    // Prepare the request data for TotalPay API
    $data = [
        'merchant_key' => $merchant_key,
        'operation' => 'purchase',
        'methods' => ['card'], // Adjust methods as needed
        'parameters' => [
            'card' => [
                'param1' => 'val-1', // Replace with actual card params
                'param2' => 'val-2'
            ]
        ],
        'session_expiry' => 60, // Session expiry in minutes
        'order' => $order,
        'cancel_url' => 'https://example.domain.com/cancel',
        'success_url' => 'https://example.domain.com/success',
        'expiry_url' => 'https://example.domain.com/expiry',
        'url_target' => '_self', // Ensure this is a valid value (_self, _blank, etc.)
        'customer' => $customer,
        'billing_address' => $billing_address,
        'card_token' => $card_token,
        'req_token' => true,
        'recurring_init' => true,
        'schedule_id' => '9d0f5cc4-f07b-11ec-abf4-0242ac120006', // Example, replace as needed
        'hash' => $hash, // The dynamically generated hash
    ];
    
    // Make the API request using wp_remote_post
    $response = wp_remote_post('https://checkout.totalpay.global/api/v1/session', [
        'method'    => 'POST',
        'body'      => json_encode($data), // Convert the data to JSON
        'headers'   => [
            'Content-Type' => 'application/json',
        ],
    ]);

    // Check for errors
    if (is_wp_error($response)) {
        return new WP_REST_Response('Error connecting to TotalPay checkout', 500);
    }

    // Retrieve the response body from TotalPay API
    $response_body = wp_remote_retrieve_body($response);

    // Log the response for debugging (only in development!)
    error_log('TotalPay API Response: ' . $response_body);

    // Return the response to the client
    return new WP_REST_Response($response_body, 200);
}



//RETURN


// Hook to initialize the custom REST API endpoint
add_action('rest_api_init', function() {
    register_rest_route('custom/v1', '/returns/', [
        'methods' => 'POST',
        'callback' => 'create_return_post',
        'permission_callback' => '__return_true', // Change this to proper capability check if needed
    ]);
});

// Callback function to create a new "returns" post
function create_return_post(WP_REST_Request $request) {
    // Get the post data from the request
    $title = $request->get_param('title');
    $content = $request->get_param('content');
    $status = $request->get_param('status') ? $request->get_param('status') : 'publish'; // Default status to 'publish'
    $order_id = $request->get_param('order_id'); // ACF field: order_id
    $amount = $request->get_param('amount'); // ACF field: amount
    $transition_id = $request->get_param('transition_id'); // ACF field: transition_id

    // Validate required parameters
    if (empty($title) || empty($content) || empty($order_id) || empty($amount) || empty($transition_id)) {
        return new WP_REST_Response('Missing required parameters.', 400);
    }

    // Create the post array
    $post_data = array(
        'post_title'   => sanitize_text_field($title),
        'post_content' => sanitize_textarea_field($content),
        'post_status'  => sanitize_text_field($status),
        'post_type'    => 'returns', // Custom post type "returns"
    );

    // Insert the post into the database
    $post_id = wp_insert_post($post_data);

    // Check if the post was created successfully
    if (is_wp_error($post_id)) {
        return new WP_REST_Response($post_id->get_error_message(), 500);
    }

    // Save ACF fields
    update_field('order_id', sanitize_text_field($order_id), $post_id);  // Save 'order_id' ACF field
    update_field('amount', sanitize_text_field($amount), $post_id);      // Save 'amount' ACF field
    update_field('transition_id', sanitize_text_field($transition_id), $post_id); // Save 'transition_id' ACF field

    // Return a response with the post ID and success message
    return new WP_REST_Response(array(
        'message' => 'Post created successfully!',
        'post_id' => $post_id
    ), 201);
}

//https://admin.wellness4u.in/wp-json/custom/v1/returns/







//POLYLANG ISSUE WITH LOGIN PAGE
function disable_polylang_on_login_page() {
    if ( is_login() ) {
        // Disable the Polylang language switcher on the login page
        remove_filter( 'pll_the_languages', 'pll_the_languages_filter' );
    }
}
add_action( 'init', 'disable_polylang_on_login_page' );



//TRANSALATE


// Prevent direct access to this file
if (!defined('ABSPATH')) {
    exit;
}

// Register a custom REST API endpoint
function libre_translate_register_routes() {
    register_rest_route('libre-translate/v1', '/translate', [
        'methods' => 'POST',
        'callback' => 'libre_translate_translate_text',
        'permission_callback' => '__return_true', // Allow all users for now, you can secure it later
    ]);
}

add_action('rest_api_init', 'libre_translate_register_routes');

// The function that will handle the translation
function libre_translate_translate_text(WP_REST_Request $request) {
    // Get the parameters from the request
    $text = $request->get_param('text');
    $target_language = $request->get_param('target_language');
    
    // Validate the parameters
    if (empty($text) || empty($target_language)) {
        return new WP_REST_Response('Missing text or target language.', 400);
    }

    // Define the LibreTranslate API URL
    $url = "https://libretranslate.com/translate";

    // Prepare the data for the API request
    $data = array(
        'q' => $text,
        'source' => 'en',  // Assuming the source is English. You can modify this to auto-detect or use another field.
        'target' => $target_language
    );

    // Make the API request to LibreTranslate
    $response = wp_remote_post($url, array(
        'body' => http_build_query($data),
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    ));

    // Check if the request was successful
    if (is_wp_error($response)) {
        return new WP_REST_Response('Error: Unable to contact translation service.', 500);
    }

    // Parse the response body
    $body = wp_remote_retrieve_body($response);
    $responseData = json_decode($body, true);

    // Return the translated text or an error message if not available
    if (isset($responseData['translatedText'])) {
        return new WP_REST_Response($responseData['translatedText'], 200);
    } else {
        return new WP_REST_Response('Error: Translation failed.', 500);
    }
}




//PAYMENT API

// Register custom REST API endpoint for TotalPay


add_action('rest_api_init', function() {
    register_rest_route('totalpay/v1', '/process-payment/', [
        'methods' => 'POST',
        'callback' => 'handle_payment_request',
        'permission_callback' => '__return_true', // Update this for real security if needed
    ]);
});

// Callback function to handle the payment request
function handle_payment_request(WP_REST_Request $request) {
    // Get payment data from the request
    $data = $request->get_json_params();
    
    // Log the received data for debugging (optional)
    error_log(print_r($data, true));
    
    // Validate necessary fields (excluding hash since it's provided in the request)
    if (!isset($data['merchant_key']) || !isset($data['password']) || !isset($data['card']['number']) || !isset($data['card']['expiry']) || !isset($data['order_number']) || !isset($data['amount']) || !isset($data['currency']) || !isset($data['hash'])) {
        return new WP_REST_Response(['error' => 'Invalid payment data'], 400);
    }

    // TotalPay API URL
    $totalpay_api_url = 'https://checkout.totalpay.global/api/v1/session';

    // Prepare the data to send to TotalPay API
    $request_data = [
        'merchant_key' => $data['merchant_key'],
        'password' => $data['password'],
        'operation' => 'purchase',
        'methods' => ['card'],
        'parameters' => [
            'card' => $data['card'],
        ],
        'session_expiry' => 60,
        'order' => [
            'number' => $data['order_number'],
            'amount' => $data['amount'],
            'currency' => $data['currency'],
            'description' => $data['description'],
        ],
        'cancel_url' => $data['cancel_url'],
        'success_url' => $data['success_url'],
        'expiry_url' => $data['expiry_url'],
        'url_target' => '_parent',
        'customer' => [
            'name' => $data['customer']['name'],
            'email' => $data['customer']['email'],
        ],
       // 'billing_address' => $data['billing_address'],
      //  'payee_billing_address' => $data['payee_billing_address'], // Additional field for payee's billing address
       // 'custom_data' => $data['custom_data'], // Additional custom data
        'card_token' => $data['card_token'],
        'req_token' => true,
        'recurring_init' => true,
        'hash' => $data['hash'], // Use the provided hash directly
    ];

    // Send the request to TotalPay API using wp_remote_post()
    $response = wp_remote_post($totalpay_api_url, [
        'method'    => 'POST',
        'body'      => json_encode($request_data),
        'headers'   => [
            'Content-Type' => 'application/json',
        ],
    ]);

    // Check for errors in the response
    if (is_wp_error($response)) {
        return new WP_REST_Response(['error' => 'Failed to process payment'], 500);
    }

    // Decode the response body
    $response_body = wp_remote_retrieve_body($response);
    $response_data = json_decode($response_body, true);

    // Return the API response data back to the client
    return new WP_REST_Response($response_data, 200);
}







//TOTALPAY PAYMENT SATUS

// Hook to initialize the custom REST API endpoint
add_action('rest_api_init', function() {
    register_rest_route('totalpay/v1', '/payment-status/', [
        'methods' => 'POST',
        'callback' => 'totalpay_payment_status',
        'permission_callback' => '__return_true', // You can restrict permissions as needed
    ]);
});

// Function that handles the request to the external TotalPay API
function totalpay_payment_status(WP_REST_Request $request) {
    // Retrieve parameters from the request
    $merchant_key = sanitize_text_field($request->get_param('merchant_key'));
    $hash = sanitize_text_field($request->get_param('hash'));
    $order_id = sanitize_text_field($request->get_param('order_id'));

    // Set up the API URL and the body data
    $api_url = 'https://checkout.totalpay.global/api/v1/payment/status';
    $body = json_encode([
        'merchant_key' => $merchant_key,
        'hash' => $hash,
        'order_id' => $order_id,
    ]);

    // Set up arguments for the request to the API
    $response = wp_remote_post($api_url, [
        'method'    => 'POST',
        'body'      => $body,
        'headers'   => [
            'Content-Type' => 'application/json',
        ],
    ]);

    // Check for errors in the response
    if (is_wp_error($response)) {
        return new WP_Error('totalpay_error', 'Unable to reach TotalPay API', ['status' => 500]);
    }

    // Get the response body
    $response_body = wp_remote_retrieve_body($response);

    // Return the API response
    return rest_ensure_response(json_decode($response_body));
}



//TRANSALATION FIELD
// Register 'translation' custom post type
function create_translation_post_type() {
    $args = array(
        'label' => 'Translations',
        'public' => true,
        'has_archive' => true,
        'supports' => array( 'title', 'custom-fields' ),
        'rewrite' => array( 'slug' => 'translations' ),
        'show_in_rest' => true, // Enable REST API support for this post type
        'rest_base' => 'translations', // Custom REST API endpoint base
    );
    register_post_type( 'translation', $args );
}
add_action( 'init', 'create_translation_post_type' );

// Register custom fields for REST API (English, Arabic, Label)
function register_translation_custom_fields_rest() {
    // Register 'translation_groups' custom field for REST API
    register_meta( 'post', '_translation_groups', array(
        'type'         => 'array',
        'description'  => 'Translation Groups',
        'single'       => true,
        'show_in_rest' => true,
    ) );
}
add_action( 'rest_api_init', 'register_translation_custom_fields_rest' );

// Add custom meta box for 'translation' post type
function translation_custom_meta_box() {
    add_meta_box(
        'translation_meta_box', // Meta box ID
        'Translation Groups', // Title of the meta box
        'translation_meta_box_callback', // Callback function to display the fields
        'translation', // Post type
        'normal', // Position of the box
        'high' // Priority
    );
}
add_action( 'add_meta_boxes', 'translation_custom_meta_box' );

// Callback function to display the custom fields (English & Arabic, Label) in the meta box
function translation_meta_box_callback( $post ) {
    // Add a nonce for security
    wp_nonce_field( 'translation_meta_box_nonce', 'meta_box_nonce' );

    // Get the existing values for English, Arabic, and Label translations (if any)
    $translations = get_post_meta( $post->ID, '_translation_groups', true );

    // If no existing values, initialize an empty array
    if ( ! is_array( $translations ) ) {
        $translations = array();
    }

    // Add a search field for Label above the table
    ?>
    <label for="translation_label_search">Search by Label:</label>
    <input type="text" id="translation_label_search" name="translation_label_search" value="" placeholder="Search by Label" style="margin-bottom: 10px; width: 100%;" />

    <table id="translation_groups" style="width:100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Label</th>
                <th>English Translation</th>
                <th>Arabic Translation</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="translation_groups_list">
            <?php
            foreach ( $translations as $index => $pair ) {
                echo '<tr class="translation_group" data-index="' . $index . '">';
                echo '<td><input type="text" name="translation_label[' . $index . ']" value="' . esc_attr( $pair['label'] ) . '" class="translation_label" /></td>';
                echo '<td><input type="text" name="translation_english[' . $index . ']" value="' . esc_attr( $pair['english'] ) . '" /></td>';
                echo '<td><input type="text" name="translation_arabic[' . $index . ']" value="' . esc_attr( $pair['arabic'] ) . '" /></td>';
                echo '<td><button type="button" class="remove_translation_group">Remove Group</button></td>';
                echo '<input type="hidden" name="translation_removed[' . $index . ']" value="0" />'; // Hidden field to track removed groups
                echo '</tr>';
            }
            ?>
        </tbody>
    </table>

    <button type="button" id="add_translation_group">Add Translation Group</button>

    <script type="text/javascript">
        jQuery(document).ready(function($) {
            // Add Translation Group (Label, English & Arabic)
            $('#add_translation_group').on('click', function() {
                var index = $('#translation_groups_list .translation_group').length;
                var new_group = '<tr class="translation_group" data-index="' + index + '">';
                new_group += '<td><input type="text" name="translation_label[' + index + ']" value="" class="translation_label" /></td>';
                new_group += '<td><input type="text" name="translation_english[' + index + ']" value="" /></td>';
                new_group += '<td><input type="text" name="translation_arabic[' + index + ']" value="" /></td>';
                new_group += '<td><button type="button" class="remove_translation_group">Remove Group</button></td>';
                new_group += '<input type="hidden" name="translation_removed[' + index + ']" value="0" />'; // Hidden field to track removed groups
                new_group += '</tr>';
                
                $('#translation_groups_list').append(new_group);
            });

            // Remove a Translation Group
            $(document).on('click', '.remove_translation_group', function() {
                var group = $(this).closest('.translation_group');
                var index = group.data('index'); // Get the index of the group to be removed

                // Mark the group as removed by changing the hidden field value
                $('input[name="translation_removed[' + index + ']"]').val('1');

                // Fade out and then remove the group from the DOM
                group.fadeOut(300, function() {
                    $(this).remove(); // Remove the group (row) from the DOM
                });
            });

            // Implementing the search functionality for the Label field
            $('#translation_label_search').on('input', function() {
                var searchValue = $(this).val().toLowerCase();

                // Loop through each row and hide those that don't match the search value
                $('#translation_groups_list .translation_group').each(function() {
                    var labelText = $(this).find('.translation_label').val().toLowerCase();

                    if (labelText.includes(searchValue)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            });
        });
    </script>

    <style>
        /* Style the Add and Remove buttons */
        #add_translation_group, .remove_translation_group {
            color: white;
            border: none;
            font-size: 13px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            background: #988644;
            padding: 4px;
        }

        /* Add hover effect */
        #add_translation_group:hover, .remove_translation_group:hover {
            background-color: #005f8d; /* Darker blue on hover */
        }

        /* Style for the table and its cells */
        #translation_groups {
            width: 100%;
            border-collapse: collapse;
        }

        #translation_groups th, #translation_groups td {
            padding: 0;
            border: 1px solid #ddd;
        }

        #translation_groups th {
            text-align: left;
        }

        /* Style for the input fields inside the table */
        #translation_groups input[type="text"] {
            width: 100%;
            padding: 0 5px;
            margin: 0;
            border: 0;
            border-radius: 0;
            font-size: 13px;
        }

        /* Style for the 'Remove Group' button */
        .remove_translation_group:hover {
            background-color: #c9302c;
        }
    </style>
<?php }

// Save the custom field data
function save_translation_custom_field( $post_id ) {
    // Check if nonce is set and verify it
    if ( ! isset( $_POST['meta_box_nonce'] ) || ! wp_verify_nonce( $_POST['meta_box_nonce'], 'translation_meta_box_nonce' ) ) {
        return $post_id;
    }

    // Prevent autosave and revision
    if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
        return $post_id;
    }

    // Check user permission
    if ( ! current_user_can( 'edit_post', $post_id ) ) {
        return $post_id;
    }

    // Save the custom fields (Label, English & Arabic pairs) as an array of groups
    if ( isset( $_POST['translation_english'] ) && isset( $_POST['translation_arabic'] ) && isset( $_POST['translation_label'] ) ) {
        $translation_groups = array();
        foreach ( $_POST['translation_english'] as $index => $english ) {
            if ( isset( $_POST['translation_removed'][$index] ) && $_POST['translation_removed'][$index] == '1' ) {
                continue; // Skip this group if it was marked for removal
            }

            $translation_groups[] = array(
                'label'   => sanitize_text_field( $_POST['translation_label'][ $index ] ),
                'english' => sanitize_text_field( $english ),
                'arabic'  => sanitize_text_field( $_POST['translation_arabic'][ $index ] ),
            );
        }
        update_post_meta( $post_id, '_translation_groups', $translation_groups );
    }
}
add_action( 'save_post', 'save_translation_custom_field' );

// Register custom REST API endpoint to fetch translations
function register_translation_rest_api() {
    register_rest_route( 'custom/v1', '/translations', array(
        'methods' => 'GET',
        'callback' => 'get_all_translations',
        'permission_callback' => '__return_true', // Optional: Set permission based on your needs
    ) );
}
add_action( 'rest_api_init', 'register_translation_rest_api' );

// Callback function to fetch all translations
function get_all_translations( $data ) {
    // Query the custom post type 'translation'
    $args = array(
        'post_type' => 'translation', // The custom post type
        'posts_per_page' => -1, // Get all posts
    );
    
    $translations_query = new WP_Query( $args );
    
    // Prepare the response
    $translations = array();
    if ( $translations_query->have_posts() ) {
        while ( $translations_query->have_posts() ) {
            $translations_query->the_post();
            
            // Get the custom fields for each translation
            $translation_groups = get_post_meta( get_the_ID(), '_translation_groups', true );

            // Prepare each translation group to return the fields (English, Arabic, Label)
            $translation_data = array();
            foreach ( $translation_groups as $group ) {
                $translation_data[] = array(
                    'label'   => $group['label'],
                    'english' => $group['english'],
                    'arabic'  => $group['arabic'],
                );
            }

            $translations[] = array(
                'title' => get_the_title(),
                'translations' => $translation_data,
            );
        }
    }
    
    // Reset post data
    wp_reset_postdata();
    
    // Return the translated data
    return new WP_REST_Response( $translations, 200 );
}






//DISABLE CONTENT PART OF TRANSALATION
// Disable the Gutenberg block editor for the 'translation' post type
function disable_gutenberg_for_translation($is_enabled, $post_type) {
    if ('translation' === $post_type) {
        return false; // Disable the block editor
    }
    return $is_enabled;
}
add_filter('use_block_editor_for_post_type', 'disable_gutenberg_for_translation', 10, 2);

// Remove the default WYSIWYG (Classic Editor) for 'translation' post type
function remove_translation_editor_support() {
    remove_post_type_support('translation', 'editor');
}
add_action('init', 'remove_translation_editor_support');





//ADDRESS ADD, UPDATE, DELETE NEW
// ADDRESS ADD, UPDATE, DELETE NEW
add_action('rest_api_init', function() {
    // Register custom route for getting all addresses
    register_rest_route('custom/v1', '/customer/(?P<id>\d+)/get-addresses', [
        'methods' => 'GET',
        'callback' => 'get_customer_addresses',
        'permission_callback' => '__return_true',  // For demonstration, adjust according to permission needs
    ]);

    // Register custom route for getting a specific address by address_id
    register_rest_route('custom/v1', '/customer/(?P<id>\d+)/get-address/(?P<address_id>\d+)', [
        'methods' => 'GET',
        'callback' => 'get_customer_address_by_id',
        'permission_callback' => '__return_true',  // For demonstration, adjust according to permission needs
    ]);

    // Register custom route for adding a new address
    register_rest_route('custom/v1', '/customer/(?P<id>\d+)/add-address', [
        'methods' => 'POST',
        'callback' => 'add_customer_address',
        'permission_callback' => '__return_true',  // For demonstration, adjust according to permission needs
    ]);

    // Register custom route for updating an address
    register_rest_route('custom/v1', '/customer/(?P<id>\d+)/update-address', [
        'methods' => 'PUT',
        'callback' => 'update_customer_address',
        'permission_callback' => '__return_true',  // For demonstration, adjust according to permission needs
    ]);

    // Register custom route for deleting an address
    register_rest_route('custom/v1', '/customer/(?P<id>\d+)/delete-address', [
        'methods' => 'DELETE',
        'callback' => 'delete_customer_address',
        'permission_callback' => '__return_true',  // For demonstration, adjust according to permission needs
    ]);
});

// Callback function to get all addresses
function get_customer_addresses(WP_REST_Request $request) {
    $customer_id = $request->get_param('id');
    
    // Get the existing customer
    $customer = new WC_Customer($customer_id);
    if (!$customer->get_id()) {
        return new WP_REST_Response('Customer not found', 404);
    }
    
    // Get current meta data (addresses)
    $meta_data = $customer->get_meta('additional_addresses', true);

    // If no addresses are found, return 0 instead of a message
    if (empty($meta_data)) {
        return new WP_REST_Response(0, 200);
    }

    // Return the addresses
    return new WP_REST_Response($meta_data, 200);
}

// Callback function to get a specific address by address_id
function get_customer_address_by_id(WP_REST_Request $request) {
    $customer_id = $request->get_param('id');
    $address_id = $request->get_param('address_id');  // Get the specific address ID
    
    // Get the existing customer
    $customer = new WC_Customer($customer_id);
    if (!$customer->get_id()) {
        return new WP_REST_Response('Customer not found', 404);
    }
    
    // Get current meta data (addresses)
    $meta_data = $customer->get_meta('additional_addresses', true);

    // Find the address with the given address ID
    foreach ($meta_data as $address) {
        if ($address['id'] == $address_id) {
            // If found, return the address data
            return new WP_REST_Response($address, 200);
        }
    }

    // If the address is not found
    return new WP_REST_Response('Address not found', 404);
}

// Callback function to add a new address
function add_customer_address(WP_REST_Request $request) {
    $customer_id = $request->get_param('id');
    $new_address = $request->get_json_params()['meta_data'][0]['value'];

    // Check if the address is 0 (or any other invalid condition you want to set)
    if ($new_address == 0 || empty($new_address) || !is_array($new_address)) {
        return new WP_REST_Response('Cannot add an address with invalid data (0 or empty)', 400);
    }
    
    // Add the "street" field to the new address if not already present
    if (!isset($new_address['street'])) {
        $new_address['street'] = ''; // Default value or empty string
    }

    // Get the existing customer
    $customer = new WC_Customer($customer_id);
    if (!$customer->get_id()) {
        return new WP_REST_Response('Customer not found', 404);
    }
    
    // Get current meta data (addresses)
    $meta_data = $customer->get_meta('additional_addresses', true);
    
    // If no addresses exist, initialize the meta_data as an empty array
    if (!is_array($meta_data)) {
        $meta_data = [];
    }
    
    // Set the ID for the new address (incrementing the highest existing ID or starting at 1)
    if (empty($meta_data)) {
        $new_address['id'] = 1; // If no addresses exist, start with ID 1
    } else {
        $new_address['id'] = max(array_column($meta_data, 'id')) + 1; // Increment the highest ID
    }
    
    // Add the new address to the existing addresses
    $meta_data[] = $new_address;
    
    // Save the updated addresses
    $customer->update_meta_data('additional_addresses', $meta_data);
    $customer->save();
    
    return new WP_REST_Response('Address added successfully', 200);
}

// Callback function to update an address
function update_customer_address(WP_REST_Request $request) {
    $customer_id = $request->get_param('id');
    $updated_address = $request->get_json_params()['meta_data'][0]['value'];
    $address_id = $request->get_param('address_id'); // Get the address ID to update
    
    if (!is_array($updated_address) || empty($updated_address)) {
        return new WP_REST_Response('Invalid address data', 400);
    }
    
    // Ensure "street" is part of the updated address data
    if (!isset($updated_address['street'])) {
        $updated_address['street'] = ''; // Default value or empty string if not provided
    }

    // Get the existing customer
    $customer = new WC_Customer($customer_id);
    if (!$customer->get_id()) {
        return new WP_REST_Response('Customer not found', 404);
    }
    
    // Get current meta data (addresses)
    $meta_data = $customer->get_meta('additional_addresses', true);
    
    // Check if the address ID exists in the current data
    $address_found = false;
    
    // Loop through the addresses and update the one with the matching ID
    foreach ($meta_data as &$address) {
        if ($address['id'] == $address_id) {
            // Update the address with the new data
            $address = array_merge($address, $updated_address);
            $address_found = true;
            break;
        }
    }
    
    // If the address was not found, return an error
    if (!$address_found) {
        return new WP_REST_Response('Address not found', 404);
    }
    
    // Save the updated addresses
    $customer->update_meta_data('additional_addresses', $meta_data);
    $customer->save();
    
    return new WP_REST_Response('Address updated successfully', 200);
}

// Callback function to delete an address
function delete_customer_address(WP_REST_Request $request) {
    $customer_id = $request->get_param('id');
    $address_id = $request->get_param('address_id');  // Get the address ID to delete
    
    // Get the existing customer
    $customer = new WC_Customer($customer_id);
    if (!$customer->get_id()) {
        return new WP_REST_Response('Customer not found', 404);
    }
    
    // Get current meta data
    $meta_data = $customer->get_meta('additional_addresses', true);
    
    // Find and remove the address with the specified ID
    $updated_meta_data = array_filter($meta_data, function($address) use ($address_id) {
        return $address['id'] != $address_id;
    });
    
    // Re-index the array to avoid gaps in indices
    $updated_meta_data = array_values($updated_meta_data);
    
    // Save the updated addresses
    $customer->update_meta_data('additional_addresses', $updated_meta_data);
    $customer->save();
    
    return new WP_REST_Response('Address deleted successfully', 200);
}






//SEND NOTIFICATION BY ORDER STATUS
add_action('woocommerce_order_status_changed', 'send_custom_email_notifications', 10, 4 );
function send_custom_email_notifications( $order_id, $old_status, $new_status, $order ){
    if ( $new_status == 'cancelled' || $new_status == 'failed' ){
        $wc_emails = WC()->mailer()->get_emails(); // Get all WC_emails objects instances
        $customer_email = $order->get_billing_email(); // The customer email
    }

    if ( $new_status == 'cancelled' ) {
        // change the recipient of this instance
        $wc_emails['WC_Email_Cancelled_Order']->recipient = $customer_email;
        // Sending the email from this instance
        $wc_emails['WC_Email_Cancelled_Order']->trigger( $order_id );
    } 
    elseif ( $new_status == 'failed' ) {
        // change the recipient of this instance
        $wc_emails['WC_Email_Failed_Order']->recipient = $customer_email;
        // Sending the email from this instance
        $wc_emails['WC_Email_Failed_Order']->trigger( $order_id );
    } 
}


//REMOVE UNWANTED STATUS OF ORDERS

function remove_custom_order_status( $order_statuses ) {
    // Remove unwanted order statuses
    unset( $order_statuses['wc-on-hold'] );   // Removes the "On Hold" status
   // unset( $order_statuses['wc-pending'] );    // Removes the "Pending Payment" status
   // unset( $order_statuses['wc-refunded'] );   // Removes the "Refunded" status
    unset( $order_statuses['wc-failed'] );     // Removes the "Failed" status
    unset( $order_statuses['draft'] );      // Removes the "Draft" status

    return $order_statuses;
}
add_filter( 'wc_order_statuses', 'remove_custom_order_status' );


/////////////////////CUSTOM FIELDS FOR MAIN CAT, SUB, CHILD FOR STORE META

function categories_and_brands_woocommerce_product_select_fields() {
    // Get all 'main-categories' CPT posts
    $args = array(
        'post_type' => 'main-categories',
        'posts_per_page' => -1, // Get all categories
    );
    $categories = get_posts($args);

    // Build select options for main categories
    $options = array('' => __('Select Main Category', 'woocommerce')); // Default option
    foreach ($categories as $category) {
        $options[$category->ID] = $category->post_title; // Use post title as the option label
    }

    // Display the main categories select box
    woocommerce_wp_select(
        array(
            'id'          => 'main_categories_new', // Field ID for main categories
            'label'       => __('Select Main Category', 'woocommerce'), // Field label
            'desc_tip'    => 'true',
            'description' => __('Select a main category from the list.', 'woocommerce'),
            'options'     => $options, // Select options from custom post type
            'value'       => get_post_meta(get_the_ID(), 'main_categories_new', true), // Default value
        )
    );

    // Get all 'sub-categories' CPT posts
    $args_sub = array(
        'post_type' => 'sub-categories',
        'posts_per_page' => -1, // Get all sub-categories
    );
    $sub_categories = get_posts($args_sub);

    // Build select options for sub categories
    $sub_options = array('' => __('Select Sub Category', 'woocommerce')); // Default option
    foreach ($sub_categories as $sub_category) {
        $sub_options[$sub_category->ID] = $sub_category->post_title; // Use post title as the option label
    }

    // Display the sub categories select box
    woocommerce_wp_select(
        array(
            'id'          => 'sub_categories_new', // Field ID for sub categories
            'label'       => __('Select Sub Category', 'woocommerce'), // Field label
            'desc_tip'    => 'true',
            'description' => __('Select a sub category from the list.', 'woocommerce'),
            'options'     => $sub_options, // Select options from custom post type
            'value'       => get_post_meta(get_the_ID(), 'sub_categories_new', true), // Default value
        )
    );

    // Get all 'child-categories' CPT posts
    $args_child = array(
        'post_type' => 'child-categories',
        'posts_per_page' => -1, // Get all child-categories
    );
    $child_categories = get_posts($args_child);

    // Build select options for child categories
    $child_options = array('' => __('Select Child Category', 'woocommerce')); // Default option
    foreach ($child_categories as $child_category) {
        $child_options[$child_category->ID] = $child_category->post_title; // Use post title as the option label
    }

    // Display the child categories select box
    woocommerce_wp_select(
        array(
            'id'          => 'child_categories_new', // Field ID for child categories
            'label'       => __('Select Child Category', 'woocommerce'), // Field label
            'desc_tip'    => 'true',
            'description' => __('Select a child category from the list.', 'woocommerce'),
            'options'     => $child_options, // Select options from custom post type
            'value'       => get_post_meta(get_the_ID(), 'child_categories_new', true), // Default value
        )
    );

    // Get all 'brands' CPT posts
    $args_brands = array(
        'post_type' => 'brands',  // Assuming 'brands' is a custom post type
        'posts_per_page' => -1,  // Get all brands
    );
    $brands = get_posts($args_brands);

    // Build select options for brands
    $brand_options = array('' => __('Select Brand', 'woocommerce')); // Default option
    foreach ($brands as $brand) {
        $brand_options[$brand->ID] = $brand->post_title; // Use post title as the option label
    }

    // Display the brands select box
    woocommerce_wp_select(
        array(
            'id'          => 'brands_new', // Field ID for brands
            'label'       => __('Select Brand', 'woocommerce'), // Field label
            'desc_tip'    => 'true',
            'description' => __('Select a brand from the list.', 'woocommerce'),
            'options'     => $brand_options, // Select options from custom post type
            'value'       => get_post_meta(get_the_ID(), 'brands_new', true), // Default value
        )
    );
}
add_action('woocommerce_product_options_general_product_data', 'categories_and_brands_woocommerce_product_select_fields');

// Save the custom field values for main category, sub category, child category, and brand
function categories_and_brands_woocommerce_save_product_select_fields($post_id) {
    // Save main category (Store only the ID)
    if (isset($_POST['main_categories_new'])) {
        $main_category_id = sanitize_text_field($_POST['main_categories_new']);
        update_post_meta($post_id, 'main_categories_new', $main_category_id); // Save only the ID
    }

    // Save sub category (Store only the ID)
    if (isset($_POST['sub_categories_new'])) {
        $sub_category_id = sanitize_text_field($_POST['sub_categories_new']);
        update_post_meta($post_id, 'sub_categories_new', $sub_category_id); // Save only the ID
    }

    // Save child category (Store only the ID)
    if (isset($_POST['child_categories_new'])) {
        $child_category_id = sanitize_text_field($_POST['child_categories_new']);
        update_post_meta($post_id, 'child_categories_new', $child_category_id); // Save only the ID
    }

    // Save brand (Store only the ID)
    if (isset($_POST['brands_new'])) {
        $brand_id = sanitize_text_field($_POST['brands_new']);
        update_post_meta($post_id, 'brands_new', $brand_id); // Save only the ID
    }
}
add_action('woocommerce_process_product_meta', 'categories_and_brands_woocommerce_save_product_select_fields');

// Retrieve the custom field values for main category, sub category, child category, and brand
function get_categories_and_brands_data($post_id) {
    // Retrieve only the saved ID for main category, sub category, child category, and brand
    return array(
        'main_category'  => get_post_meta($post_id, 'main_categories_new', true),
        'sub_category'   => get_post_meta($post_id, 'sub_categories_new', true),
        'child_category' => get_post_meta($post_id, 'child_categories_new', true),
        'brand'          => get_post_meta($post_id, 'brands_new', true),
    );
}

// Example of how to retrieve and display the saved category and brand data (for testing purposes)
function display_categories_and_brand_data($post_id) {
    $category_and_brand_data = get_categories_and_brands_data($post_id);

    // Display the stored IDs (You can modify this code to display more relevant data if needed)
    echo 'Main Category ID: ' . $category_and_brand_data['main_category'] . '<br>';
    echo 'Sub Category ID: ' . $category_and_brand_data['sub_category'] . '<br>';
    echo 'Child Category ID: ' . $category_and_brand_data['child_category'] . '<br>';
    echo 'Brand ID: ' . $category_and_brand_data['brand'] . '<br>';
}


///////////ADDITION FIELDS
function custom_woocommerce_product_arabic_fields() {
    global $post;

    // Start the table structure with a border
    echo '<style>.form-table fieldset.form-field, .form-table p.form-field {
        padding: 0 !important;
    }
    @media only screen and (max-width: 1280px) {
        .form-table  .wrap, .form-table  .short, .form-table  input[type=email].short, .form-table  input[type=number].short, .form-table  input[type=password].short, .form-table  input[type=text].short {
            width: 100%;
        }
    }
    </style>';
    echo '<table class="form-table" style="border: 1px solid #ddd; width: 100%; padding: 10px;">';

    // Group: Name, Description, and Short Description in Arabic
    echo '<tr><th colspan="2" style="text-align: center; background-color: #f2f2f2; padding: 10px;" colspan="2"><h3>' . __('Arabic Fields', 'woocommerce') . '</h3></th></tr>';

    // Name in Arabic (Text Box)
    echo '<tr style="border-bottom: 1px solid #ddd;">';
    echo '<th style="padding: 10px; background-color: #f9f9f9; width: 30%;">';
    echo '<div class="_name_in_arabic_field ">';
    echo '<p style="margin: 0;">' . __('Name in Arabic', 'woocommerce') . '</p>';  
    echo '</div>';
    echo '</th>';
    echo '<td style="padding: 10px;">';
    woocommerce_wp_text_input(
        array(
            'id'          => '_name_in_arabic', 
            'label'       => '', 
            'desc_tip'    => 'true',
            'description' => __('Enter the product name in Arabic.', 'woocommerce'),
            'value'       => get_post_meta($post->ID, '_name_in_arabic', true),
        )
    );
    echo '</td>';
    echo '</tr>';

    // Description in Arabic (WYSIWYG Editor)
    echo '<tr style="border-bottom: 1px solid #ddd;">';
    echo '<th style="padding: 10px; background-color: #f9f9f9; width: 30%;">';
    echo '<div class="_description_in_arabic_field ">';
    echo '<p style="margin: 0;">' . __('Description in Arabic', 'woocommerce') . '</p>';  
    echo '</div>';
    echo '</th>';
    echo '<td style="padding: 10px;">';
    wp_editor(
        get_post_meta($post->ID, '_description_in_arabic', true),
        '_description_in_arabic',
        array(
            'textarea_name' => '_description_in_arabic',
            'textarea_rows' => 5,
            'editor_class'  => 'wp-editor-area',
        )
    );
    echo '</td>';
    echo '</tr>';

    // Short Description in Arabic (Text Area)
    echo '<tr style="border-bottom: 1px solid #ddd;">';
    echo '<th style="padding: 10px; background-color: #f9f9f9; width: 30%;">';
    echo '<div class="_short_description_in_arabic_field ">';
    echo '<p style="margin: 0;">' . __('Short Description in Arabic', 'woocommerce') . '</p>';  
    echo '</div>';
    echo '</th>';
    echo '<td style="padding: 10px;">';
    woocommerce_wp_textarea_input(
        array(
            'id'          => '_short_description_in_arabic',
            'label'       => '', 
            'desc_tip'    => 'true',
            'description' => __('Enter the short description of the product in Arabic.', 'woocommerce'),
            'value'       => get_post_meta($post->ID, '_short_description_in_arabic', true),
        )
    );
    echo '</td>';
    echo '</tr>';

    // Offer Deal (Select: Yes/No) with default value "No"
    echo '<tr style="border-bottom: 1px solid #ddd;">';
    echo '<th style="padding: 10px; background-color: #f9f9f9; width: 30%;">';
    echo '<div class="_offer_deal_field ">';
    echo '<p style="margin: 0;">' . __('Offer Deal', 'woocommerce') . '</p>';  
    echo '</div>';
    echo '</th>';
    echo '<td style="padding: 10px;">';
    woocommerce_wp_select(
        array(
            'id'          => '_offer_deal',
            'label'       => '',
            'desc_tip'    => 'true',
            'description' => __('Is this product part of an offer deal?', 'woocommerce'),
            'options'     => array(
                'no'   => __('No', 'woocommerce'),
                'yes'  => __('Yes', 'woocommerce'),
            ),
            'value'       => get_post_meta($post->ID, '_offer_deal', true) ? get_post_meta($post->ID, '_offer_deal', true) : 'no', // Default value is "no"
        )
    );
    echo '</td>';
    echo '</tr>';

    // Required Valid Documents (Select: Yes/No) with default value "No"
    echo '<tr style="border-bottom: 1px solid #ddd;">';
    echo '<th style="padding: 10px; background-color: #f9f9f9; width: 30%;">';
    echo '<div class="_required_valid_documents_field ">';
    echo '<p style="margin: 0;">' . __('Required Valid Documents', 'woocommerce') . '</p>';  
    echo '</div>';
    echo '</th>';
    echo '<td style="padding: 10px;">';
    woocommerce_wp_select(
        array(
            'id'          => '_required_valid_documents',
            'label'       => '',
            'desc_tip'    => 'true',
            'description' => __('Does this product require valid documents?', 'woocommerce'),
            'options'     => array(
                'no'   => __('No', 'woocommerce'),
                'yes'  => __('Yes', 'woocommerce'),
            ),
            'value'       => get_post_meta($post->ID, '_required_valid_documents', true) ? get_post_meta($post->ID, '_required_valid_documents', true) : 'no', // Default value is "no"
        )
    );
    echo '</td>';
    echo '</tr>';

    // Star Product (Select: Yes/No) with default value "No"
    echo '<tr style="border-bottom: 1px solid #ddd;">';
    echo '<th style="padding: 10px; background-color: #f9f9f9; width: 30%;">';
    echo '<div class="_star_product_field ">';
    echo '<p style="margin: 0;">' . __('Star Product', 'woocommerce') . '</p>';  
    echo '</div>';
    echo '</th>';
    echo '<td style="padding: 10px;">';
    woocommerce_wp_select(
        array(
            'id'          => '_star_product',
            'label'       => '',
            'desc_tip'    => 'true',
            'description' => __('Is this a star product?', 'woocommerce'),
            'options'     => array(
                'no'   => __('No', 'woocommerce'),
                'yes'  => __('Yes', 'woocommerce'),
            ),
            'value'       => get_post_meta($post->ID, '_star_product', true) ? get_post_meta($post->ID, '_star_product', true) : 'no', // Default value is "no"
        )
    );
    echo '</td>';
    echo '</tr>';

    // Close the table
    echo '</table>';
}
add_action('woocommerce_product_options_general_product_data', 'custom_woocommerce_product_arabic_fields');

// Save custom fields when the product is saved
function custom_woocommerce_save_product_arabic_fields($post_id) {
    // Save Name in Arabic
    if (isset($_POST['_name_in_arabic'])) {
        update_post_meta($post_id, '_name_in_arabic', sanitize_text_field($_POST['_name_in_arabic']));
    }

    // Save Description in Arabic
    if (isset($_POST['_description_in_arabic'])) {
        update_post_meta($post_id, '_description_in_arabic', wp_kses_post($_POST['_description_in_arabic']));
    }

    // Save Short Description in Arabic
    if (isset($_POST['_short_description_in_arabic'])) {
        update_post_meta($post_id, '_short_description_in_arabic', sanitize_textarea_field($_POST['_short_description_in_arabic']));
    }

    // Save Offer Deal (Select)
    if (isset($_POST['_offer_deal'])) {
        update_post_meta($post_id, '_offer_deal', sanitize_text_field($_POST['_offer_deal']));
    }

    // Save Required Valid Documents (Select)
    if (isset($_POST['_required_valid_documents'])) {
        update_post_meta($post_id, '_required_valid_documents', sanitize_text_field($_POST['_required_valid_documents']));
    }

    // Save Star Product (Select)
    if (isset($_POST['_star_product'])) {
        update_post_meta($post_id, '_star_product', sanitize_text_field($_POST['_star_product']));
    }
}
add_action('woocommerce_process_product_meta', 'custom_woocommerce_save_product_arabic_fields');

// Retrieve the custom field values
function get_custom_arabic_product_fields($post_id) {
    return array(
        'name_in_arabic'             => get_post_meta($post_id, '_name_in_arabic', true),
        'description_in_arabic'      => get_post_meta($post_id, '_description_in_arabic', true),
        'short_description_in_arabic'=> get_post_meta($post_id, '_short_description_in_arabic', true),
        'offer_deal'                 => get_post_meta($post_id, '_offer_deal', true),
        'required_valid_documents'   => get_post_meta($post_id, '_required_valid_documents', true),
        'star_product'               => get_post_meta($post_id, '_star_product', true),
    );
}


//LIMIT 100 to 1000 FOR CHILD MAIN SUB CATEOGARIES
// Register Custom REST API Route for Main Categories
// Register Custom REST API Route for Main Categories
function register_main_categories_data_endpoint() {
    register_rest_route( 'custom/v1', '/main-categories-data/', array(
        'methods' => 'GET',
        'callback' => 'get_main_categories_data',
        'permission_callback' => '__return_true', // You can change this based on your permission needs
        'args' => array(
            'per_page' => array(
                'validate_callback' => function( $param, $request, $key ) {
                    return is_numeric( $param ); // Validate if per_page is numeric
                },
                'default' => 10, // Default to 10 items per page
            ),
        ),
    ) );
}
add_action( 'rest_api_init', 'register_main_categories_data_endpoint' );

// Callback function for Main Categories
function get_main_categories_data( $data ) {
    $per_page = isset( $data['per_page'] ) ? (int) $data['per_page'] : 10;
    $per_page = min( $per_page, 1000 );  // Set maximum per_page to 1000

    // WP_Query for fetching 'main-categories'
    $args = array(
        'post_type'      => 'main-categories', // Your custom post type for main categories
        'posts_per_page' => $per_page,
    );

    $query = new WP_Query( $args );

    if ( $query->have_posts() ) {
        $posts = array();
        while ( $query->have_posts() ) {
            $query->the_post();

            // Fetch ACF fields
            $sub_categories = get_field( 'sub_categories' );  // ACF field for sub categories
            $filters        = get_field( 'Filters' );         // ACF field for Filters
            $title_arabic   = get_field( 'title_arabic' );    // ACF field for Arabic Title
            
            // Prepare the sub_categories and filters as arrays of title and link
            $sub_categories_data = array();
            if ( $sub_categories ) {
                foreach ( $sub_categories as $sub_category ) {
                    $sub_categories_data[] = array(
                        'id'    => $sub_category['ID'],  // Get the ID from the sub_category ACF field
                        'title' => $sub_category['post_title'], // Title from the sub category
                        'link'  => get_permalink( $sub_category['ID'] ),  // Get the permalink for each sub category
                    );
                }
            }

            $filters_data = array();
            if ( $filters ) {
                foreach ( $filters as $filter ) {
                    $filters_data[] = array(
                        'id'    => $filter['ID'], // Get the ID from the filter ACF field
                        'title' => $filter['post_title'], // Title from the filter
                        'link'  => get_permalink( $filter['ID'] ), // Get the permalink for each filter
                    );
                }
            }

            // Prepare the response array including ACF data
            $posts[] = array(
                'id'             => get_the_ID(),
                'title'          => get_the_title(),
                'slug'           => get_post_field( 'post_name', get_the_ID() ),
                'link'           => get_permalink(),
                'acf'            => array(
                    'sub_categories' => $sub_categories_data,  // Include the sub categories data
                    'filters'        => $filters_data,         // Include the filters data
                    'title_arabic'   => $title_arabic,         // Include the Arabic title
                ),
            );
        }

        return new WP_REST_Response( $posts, 200 );
    }

    return new WP_REST_Response( 'No main categories found', 404 );
}

// Register Custom REST API Route for Sub Categories
function register_sub_categories_data_endpoint() {
    register_rest_route( 'custom/v1', '/sub-categories-data/', array(
        'methods' => 'GET',
        'callback' => 'get_sub_categories_data',
        'permission_callback' => '__return_true', // You can change this based on your permission needs
        'args' => array(
            'per_page' => array(
                'validate_callback' => function( $param, $request, $key ) {
                    return is_numeric( $param ); // Validate if per_page is numeric
                },
                'default' => 10, // Default to 10 items per page
            ),
        ),
    ) );
}
add_action( 'rest_api_init', 'register_sub_categories_data_endpoint' );

// Callback function for Sub Categories
function get_sub_categories_data( $data ) {
    $per_page = isset( $data['per_page'] ) ? (int) $data['per_page'] : 10;
    $per_page = min( $per_page, 1000 );  // Set maximum per_page to 1000

    // WP_Query for fetching 'sub-categories'
    $args = array(
        'post_type'      => 'sub-categories', // Your custom post type for sub categories
        'posts_per_page' => $per_page,
    );

    $query = new WP_Query( $args );

    if ( $query->have_posts() ) {
        $posts = array();
        while ( $query->have_posts() ) {
            $query->the_post();

            // Fetch ACF fields
            $sub_categories = get_field( 'sub_categories' );  // ACF field for sub categories
            $filters        = get_field( 'Filters' );         // ACF field for Filters
            $title_arabic   = get_field( 'title_arabic' );    // ACF field for Arabic Title
            
            // Prepare the sub_categories and filters as arrays of title and link
            $sub_categories_data = array();
            if ( $sub_categories ) {
                foreach ( $sub_categories as $sub_category ) {
                    $sub_categories_data[] = array(
                        'id'    => $sub_category['ID'],
                        'title' => $sub_category['post_title'],
                        'link'  => get_permalink( $sub_category['ID'] ),
                    );
                }
            }

            $filters_data = array();
            if ( $filters ) {
                foreach ( $filters as $filter ) {
                    $filters_data[] = array(
                        'id'    => $filter['ID'],
                        'title' => $filter['post_title'],
                        'link'  => get_permalink( $filter['ID'] ),
                    );
                }
            }

            // Prepare the response array including ACF data
            $posts[] = array(
                'id'             => get_the_ID(),
                'title'          => get_the_title(),
                'slug'           => get_post_field( 'post_name', get_the_ID() ),
                'link'           => get_permalink(),
                'acf'            => array(
                    'sub_categories' => $sub_categories_data,
                    'filters'        => $filters_data,
                    'title_arabic'   => $title_arabic,
                ),
            );
        }

        return new WP_REST_Response( $posts, 200 );
    }

    return new WP_REST_Response( 'No sub categories found', 404 );
}


// Register Custom REST API Route for Child Categories
function register_child_categories_data_endpoint() {
    register_rest_route( 'custom/v1', '/child-categories-data/', array(
        'methods' => 'GET',
        'callback' => 'get_child_categories_data',
        'permission_callback' => '__return_true',
        'args' => array(
            'per_page' => array(
                'validate_callback' => function( $param, $request, $key ) {
                    return is_numeric( $param );
                },
                'default' => 10,
            ),
        ),
    ) );
}
add_action( 'rest_api_init', 'register_child_categories_data_endpoint' );

// Callback function for Child Categories
function get_child_categories_data( $data ) {
    $per_page = isset( $data['per_page'] ) ? (int) $data['per_page'] : 10;
    $per_page = min( $per_page, 1000 );  // Set maximum per_page to 1000

    // WP_Query for fetching 'child-categories'
    $args = array(
        'post_type'      => 'child-categories', 
        'posts_per_page' => $per_page,
    );

    $query = new WP_Query( $args );

    if ( $query->have_posts() ) {
        $posts = array();
        while ( $query->have_posts() ) {
            $query->the_post();

            // Fetch ACF fields
          //  $sub_categories = get_field( 'sub_categories' );
          //  $filters        = get_field( 'Filters' );
            $title_arabic   = get_field( 'title_arabic' );
            
            // Prepare the sub_categories and filters as arrays of title and link
            $sub_categories_data = array();
            if ( $sub_categories ) {
                foreach ( $sub_categories as $sub_category ) {
                    $sub_categories_data[] = array(
                        'id'    => $sub_category['ID'],
                        'title' => $sub_category['post_title'],
                        'link'  => get_permalink( $sub_category['ID'] ),
                    );
                }
            }

            $filters_data = array();
            if ( $filters ) {
                foreach ( $filters as $filter ) {
                    $filters_data[] = array(
                        'id'    => $filter['ID'],
                        'title' => $filter['post_title'],
                        'link'  => get_permalink( $filter['ID'] ),
                    );
                }
            }

            // Prepare the response array including ACF data
            $posts[] = array(
                'id'             => get_the_ID(),
                'title'          => get_the_title(),
                'slug'           => get_post_field( 'post_name', get_the_ID() ),
                'link'           => get_permalink(),
                'acf'            => array(
                   // 'sub_categories' => $sub_categories_data,
                   // 'filters'        => $filters_data,
                    'title_arabic'   => $title_arabic,
                ),
            );
        }

        return new WP_REST_Response( $posts, 200 );
    }

    return new WP_REST_Response( 'No child categories found', 404 );
}


//HIDE ADD NEW CONTACT INFO

// CONTACT INFO

// 1. Hide "Move to Trash" and "Delete" from Bulk Actions for 'contact-info'
function hide_trash_and_delete_bulk_action_contact_info($actions) {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'contact-info') {
        unset($actions['trash']); // Remove the "Move to Trash" option from bulk actions
    }
    return $actions;
}
add_filter('bulk_actions-edit-contact-info', 'hide_trash_and_delete_bulk_action_contact_info');

// 2. Hide "Move to Trash" from Individual Post Action Links for 'contact-info'
function hide_trash_on_edit_page_contact_info($actions, $post) {
    if ($post->post_type === 'contact-info') {
        unset($actions['trash']); // Remove "Move to Trash" from post action links on the edit page
    }
    return $actions;
}
add_filter('post_row_actions', 'hide_trash_on_edit_page_contact_info', 10, 2);


// CURRENCY

// 1. Hide "Add New" from the Admin Menu for 'currency'
function hide_add_new_from_admin_menu_currency() {
    remove_submenu_page('edit.php?post_type=currency', 'post-new.php?post_type=currency');
}
add_action('admin_menu', 'hide_add_new_from_admin_menu_currency', 999);

// 2. Hide "Add New" from the Admin Bar for 'currency'
function hide_add_new_from_admin_bar_currency($wp_admin_bar) {
    $wp_admin_bar->remove_node('new-currency');
}
add_action('admin_bar_menu', 'hide_add_new_from_admin_bar_currency', 999);

// 3. Hide "Add New" from the Post Listing Page (Button) for 'currency'
function hide_add_new_button_for_currency() {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'currency') {
        ?>
        <script type="text/javascript">
            document.addEventListener("DOMContentLoaded", function() {
                var addNewButton = document.querySelector('.page-title-action[href*="post-new.php?post_type=currency"]');
                if (addNewButton) {
                    addNewButton.style.display = 'none';  // Hides the "Add New" button
                }
            });
        </script>
        <?php
    }
}
add_action('admin_footer', 'hide_add_new_button_for_currency');

// 4. Hide "Move to Trash" and "Delete" from Bulk Actions for 'currency'
function hide_trash_and_delete_bulk_action_currency($actions) {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'currency') {
        unset($actions['trash']); // Remove the "Move to Trash" option from bulk actions
    }
    return $actions;
}
add_filter('bulk_actions-edit-currency', 'hide_trash_and_delete_bulk_action_currency');

// 5. Hide "Move to Trash" from Individual Post Action Links for 'currency'
function hide_trash_on_edit_page_currency($actions, $post) {
    if ($post->post_type === 'currency') {
        unset($actions['trash']); // Remove "Move to Trash" from post action links on the edit page
    }
    return $actions;
}
add_filter('post_row_actions', 'hide_trash_on_edit_page_currency', 10, 2);


// SHIPPING CHARGE

// 1. Hide "Add New" from the Admin Menu for 'shipping-charge'
function hide_add_new_from_admin_menu_shipping_charge() {
    remove_submenu_page('edit.php?post_type=shipping-charge', 'post-new.php?post_type=shipping-charge');
}
add_action('admin_menu', 'hide_add_new_from_admin_menu_shipping_charge', 999);

// 2. Hide "Add New" from the Admin Bar for 'shipping-charge'
function hide_add_new_from_admin_bar_shipping_charge($wp_admin_bar) {
    $wp_admin_bar->remove_node('new-shipping-charge');
}
add_action('admin_bar_menu', 'hide_add_new_from_admin_bar_shipping_charge', 999);

// 3. Hide "Add New" from the Post Listing Page (Button) for 'shipping-charge'
function hide_add_new_button_for_shipping_charge() {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'shipping-charge') {
        ?>
        <script type="text/javascript">
            document.addEventListener("DOMContentLoaded", function() {
                var addNewButton = document.querySelector('.page-title-action[href*="post-new.php?post_type=shipping-charge"]');
                if (addNewButton) {
                    addNewButton.style.display = 'none';  // Hides the "Add New" button
                }
            });
        </script>
        <?php
    }
}
add_action('admin_footer', 'hide_add_new_button_for_shipping_charge');

// 4. Hide "Move to Trash" and "Delete" from Bulk Actions for 'shipping-charge'
function hide_trash_and_delete_bulk_action_shipping_charge($actions) {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'shipping-charge') {
        unset($actions['trash']); // Remove the "Move to Trash" option from bulk actions
    }
    return $actions;
}
add_filter('bulk_actions-edit-shipping-charge', 'hide_trash_and_delete_bulk_action_shipping_charge');

// 5. Hide "Move to Trash" from Individual Post Action Links for 'shipping-charge'
function hide_trash_on_edit_page_shipping_charge($actions, $post) {
    if ($post->post_type === 'shipping-charge') {
        unset($actions['trash']); // Remove "Move to Trash" from post action links on the edit page
    }
    return $actions;
}
add_filter('post_row_actions', 'hide_trash_on_edit_page_shipping_charge', 10, 2);


// FAQ

// 1. Hide "Add New" from the Admin Menu for 'faq'
function hide_add_new_from_admin_menu_faq() {
    remove_submenu_page('edit.php?post_type=faq', 'post-new.php?post_type=faq');
}
add_action('admin_menu', 'hide_add_new_from_admin_menu_faq', 999);

// 2. Hide "Add New" from the Admin Bar for 'faq'
function hide_add_new_from_admin_bar_faq($wp_admin_bar) {
    $wp_admin_bar->remove_node('new-faq');
}
add_action('admin_bar_menu', 'hide_add_new_from_admin_bar_faq', 999);

// 3. Hide "Add New" from the Post Listing Page (Button) for 'faq'
function hide_add_new_button_for_faq() {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'faq') {
        ?>
        <script type="text/javascript">
            document.addEventListener("DOMContentLoaded", function() {
                var addNewButton = document.querySelector('.page-title-action[href*="post-new.php?post_type=faq"]');
                if (addNewButton) {
                    addNewButton.style.display = 'none';  // Hides the "Add New" button
                }
            });
        </script>
        <?php
    }
}
add_action('admin_footer', 'hide_add_new_button_for_faq');

// 4. Hide "Move to Trash" and "Delete" from Bulk Actions for 'faq'
function hide_trash_and_delete_bulk_action_faq($actions) {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'faq') {
        unset($actions['trash']); // Remove the "Move to Trash" option from bulk actions
    }
    return $actions;
}
add_filter('bulk_actions-edit-faq', 'hide_trash_and_delete_bulk_action_faq');

// 5. Hide "Move to Trash" from Individual Post Action Links for 'faq'
function hide_trash_on_edit_page_faq($actions, $post) {
    if ($post->post_type === 'faq') {
        unset($actions['trash']); // Remove "Move to Trash" from post action links on the edit page
    }
    return $actions;
}
add_filter('post_row_actions', 'hide_trash_on_edit_page_faq', 10, 2);


// SECURITY PAYMENTS

// 1. Hide "Add New" from the Admin Menu for 'security-payments'
function hide_add_new_from_admin_menu_security_payments() {
    remove_submenu_page('edit.php?post_type=security-payments', 'post-new.php?post_type=security-payments');
}
add_action('admin_menu', 'hide_add_new_from_admin_menu_security_payments', 999);

// 2. Hide "Add New" from the Admin Bar for 'security-payments'
function hide_add_new_from_admin_bar_security_payments($wp_admin_bar) {
    $wp_admin_bar->remove_node('new-security-payments');
}
add_action('admin_bar_menu', 'hide_add_new_from_admin_bar_security_payments', 999);

// 3. Hide "Add New" from the Post Listing Page (Button) for 'security-payments'
function hide_add_new_button_for_security_payments() {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'security-payments') {
        ?>
        <script type="text/javascript">
            document.addEventListener("DOMContentLoaded", function() {
                var addNewButton = document.querySelector('.page-title-action[href*="post-new.php?post_type=security-payments"]');
                if (addNewButton) {
                    addNewButton.style.display = 'none';  // Hides the "Add New" button
                }
            });
        </script>
        <?php
    }
}
add_action('admin_footer', 'hide_add_new_button_for_security_payments');

// 4. Hide "Move to Trash" and "Delete" from Bulk Actions for 'security-payments'
function hide_trash_and_delete_bulk_action_security_payments($actions) {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'security-payments') {
        unset($actions['trash']); // Remove the "Move to Trash" option from bulk actions
    }
    return $actions;
}
add_filter('bulk_actions-edit-security-payments', 'hide_trash_and_delete_bulk_action_security_payments');

// 5. Hide "Move to Trash" from Individual Post Action Links for 'security-payments'
function hide_trash_on_edit_page_security_payments($actions, $post) {
    if ($post->post_type === 'security-payments') {
        unset($actions['trash']); // Remove "Move to Trash" from post action links on the edit page
    }
    return $actions;
}
add_filter('post_row_actions', 'hide_trash_on_edit_page_security_payments', 10, 2);


// DELIVERY AND RETURNS

// 1. Hide "Add New" from the Admin Menu for 'delivery-and-returns'
function hide_add_new_from_admin_menu_delivery_and_returns() {
    remove_submenu_page('edit.php?post_type=delivery-and-returns', 'post-new.php?post_type=delivery-and-returns');
}
add_action('admin_menu', 'hide_add_new_from_admin_menu_delivery_and_returns', 999);

// 2. Hide "Add New" from the Admin Bar for 'delivery-and-returns'
function hide_add_new_from_admin_bar_delivery_and_returns($wp_admin_bar) {
    $wp_admin_bar->remove_node('new-delivery-and-returns');
}
add_action('admin_bar_menu', 'hide_add_new_from_admin_bar_delivery_and_returns', 999);

// 3. Hide "Add New" from the Post Listing Page (Button) for 'delivery-and-returns'
function hide_add_new_button_for_delivery_and_returns() {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'delivery-and-returns') {
        ?>
        <script type="text/javascript">
            document.addEventListener("DOMContentLoaded", function() {
                var addNewButton = document.querySelector('.page-title-action[href*="post-new.php?post_type=delivery-and-returns"]');
                if (addNewButton) {
                    addNewButton.style.display = 'none';  // Hides the "Add New" button
                }
            });
        </script>
        <?php
    }
}
add_action('admin_footer', 'hide_add_new_button_for_delivery_and_returns');

// 4. Hide "Move to Trash" and "Delete" from Bulk Actions for 'delivery-and-returns'
function hide_trash_and_delete_bulk_action_delivery_and_returns($actions) {
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'delivery-and-returns') {
        unset($actions['trash']); // Remove the "Move to Trash" option from bulk actions
    }
    return $actions;
}
add_filter('bulk_actions-edit-delivery-and-returns', 'hide_trash_and_delete_bulk_action_delivery_and_returns');

// 5. Hide "Move to Trash" from Individual Post Action Links for 'delivery-and-returns'
function hide_trash_on_edit_page_delivery_and_returns($actions, $post) {
    if ($post->post_type === 'delivery-and-returns') {
        unset($actions['trash']); // Remove "Move to Trash" from post action links on the edit page
    }
    return $actions;
}
add_filter('post_row_actions', 'hide_trash_on_edit_page_delivery_and_returns', 10, 2);


// PAGES
// 1. Hide "Add New" from the Admin Menu for 'page' (Except for user with email "jaseerali2012@gmail.com")
function hide_add_new_from_admin_menu_pages() {
    // Get the current logged-in user's email
    $current_user_email = wp_get_current_user()->user_email;
    
    // Check if the user's email is NOT "jaseerali2012@gmail.com"
    if ($current_user_email !== 'jaseerali2012@gmail.com') {
        remove_submenu_page('edit.php?post_type=page', 'post-new.php?post_type=page');
    }
}
add_action('admin_menu', 'hide_add_new_from_admin_menu_pages', 999);

// 2. Hide "Add New" from the Admin Bar for 'page' (Except for user with email "jaseerali2012@gmail.com")
function hide_add_new_from_admin_bar_pages($wp_admin_bar) {
    // Get the current logged-in user's email
    $current_user_email = wp_get_current_user()->user_email;
    
    // Check if the user's email is NOT "jaseerali2012@gmail.com"
    if ($current_user_email !== 'jaseerali2012@gmail.com') {
        $wp_admin_bar->remove_node('new-page');
    }
}
add_action('admin_bar_menu', 'hide_add_new_from_admin_bar_pages', 999);

// 3. Hide "Add New" from the Post Listing Page (Button) for 'page' (Except for user with email "jaseerali2012@gmail.com")
function hide_add_new_button_for_pages() {
    // Get the current logged-in user's email
    $current_user_email = wp_get_current_user()->user_email;
    
    // Check if the user's email is NOT "jaseerali2012@gmail.com"
    if (isset($_GET['post_type']) && $_GET['post_type'] === 'page' && $current_user_email !== 'jaseerali2012@gmail.com') {
        ?>
        <script type="text/javascript">
            document.addEventListener("DOMContentLoaded", function() {
                var addNewButton = document.querySelector('.page-title-action[href*="post-new.php?post_type=page"]');
                if (addNewButton) {
                    addNewButton.style.display = 'none';  // Hides the "Add New" button
                }
            });
        </script>
        <?php
    }
}
add_action('admin_footer', 'hide_add_new_button_for_pages');






//GET CURRENT CUSTOMERS
function get_customers_by_role( $data ) {
    // Get the per_page query parameter (default to 10 if not provided)
    $per_page = isset( $data['per_page'] ) ? (int) $data['per_page'] : 10;
    
    // Get all users with the 'customer' role
    $args = array(
        'role'    => 'customer', // The 'customer' role
        'number'  => $per_page,  // Set the number of users per page
        'fields'  => array( 'ID', 'user_login', 'user_email' ), // Specify the fields to return
    );
    
    // Get users from the database
    $users = get_users( $args );

    // Prepare the user data to return in the API response
    $user_data = array();
    foreach ( $users as $user ) {
        $user_data[] = array(
            'id'    => $user->ID,
            'login' => $user->user_login,
            'email' => $user->user_email,
        );
    }

    // Return the users as a REST API response
    return new WP_REST_Response( $user_data, 200 );
}

// Register the custom REST API endpoint
add_action( 'rest_api_init', function() {
    register_rest_route( 'custom/v1', '/customers', array(
        'methods'             => 'GET', // Only allow GET requests
        'callback'            => 'get_customers_by_role', // The function that will be called
        'args'                => array(
            'per_page' => array(
                'required' => false,
                'validate_callback' => function( $param, $request, $key ) {
                    // Validate that per_page is a number
                    return is_numeric( $param );
                }
            ),
        ),
    ));
});





// Disable new user registration email
remove_action( 'user_register', 'wp_send_new_user_notifications', 10, 1 );



//RETURN DAYS
// Hook to add admin menu
add_action('admin_menu', 'add_return_settings_menu');

// Function to add the menu item
function add_return_settings_menu() {
    // Create top-level menu item
    add_menu_page(
        'Return Settings',               // Page title
        'Return Settings',               // Menu title
        'read',                          // Capability (read is for all users)
        'return-settings',               // Menu slug
        'return_settings_page',          // Function to display the page
        'dashicons-undo',                // Icon
        80                               // Position
    );
}

// Function to display the settings page
function return_settings_page() {
    // Check if the user has permission to read (accessible for all users)
    if (!current_user_can('read')) {
        return;
    }

    // Handle form submission to save the "Return Days" option
    if (isset($_POST['return_days'])) {
        update_option('return_days', sanitize_text_field($_POST['return_days']));
        echo '<div class="updated"><p>Settings saved successfully!</p></div>';
    }

    // Get the current "Return Days" value
    $return_days = get_option('return_days', '30'); // Default to 30 days if no value is saved
    ?>

    <div class="wrap">
        <h1>Return Settings</h1>
        <form method="POST">
            <table class="form-table">
                <tr valign="top">
                    <th scope="row"><label for="return_days">Return Days</label></th>
                    <td>
                        <input type="number" id="return_days" name="return_days" value="<?php echo esc_attr($return_days); ?>" min="1" step="1" />
                        <p class="description">Enter the number of days allowed for returns.</p>
                    </td>
                </tr>
            </table>

            <p class="submit">
                <input type="submit" class="button-primary" value="Save Settings" />
            </p>
        </form>
    </div>
    <?php
}


// Register custom REST API endpoints
add_action('rest_api_init', 'register_return_settings_endpoint');

// Function to register the custom endpoint
function register_return_settings_endpoint() {
    // GET endpoint to retrieve the "Return Days" value
    register_rest_route('custom/v1', '/return-days', [
        'methods' => 'GET',
        'callback' => 'get_return_days',
        'permission_callback' => '__return_true', // Public access (adjust for your use case)
    ]);

    // POST endpoint to update the "Return Days" value
    register_rest_route('custom/v1', '/return-days', [
        'methods' => 'POST',
        'callback' => 'update_return_days',
        'permission_callback' => 'is_user_logged_in', // Ensure user is logged in before updating
    ]);
}

// Callback function for GET request (retrieve "Return Days")
function get_return_days(WP_REST_Request $request) {
    // Get the current "Return Days" value from the options table
    $return_days = get_option('return_days', 30); // Default to 30 if not set
    return new WP_REST_Response(['return_days' => $return_days], 200);
}

// Callback function for POST request (update "Return Days")
function update_return_days(WP_REST_Request $request) {
    // Get the new "Return Days" value from the request
    $new_return_days = $request->get_param('return_days');

    // Validate input (ensure it's a valid number and greater than 0)
    if (!is_numeric($new_return_days) || $new_return_days <= 0) {
        return new WP_REST_Response(['message' => 'Invalid Return Days value. It must be a positive number.'], 400);
    }

    // Save the new value to the options table
    update_option('return_days', $new_return_days);

    return new WP_REST_Response(['message' => 'Return Days updated successfully.'], 200);
}




//CONFIRMATION POPUP FOR ADDTOCART
add_action('admin_menu', 'add_cart_confirmation_menu');

function add_cart_confirmation_menu() {
    add_menu_page(
        'Cart Confirmation',        // Page title
        'Cart Confirmation',        // Menu title
        'manage_options',           // Capability
        'cart-confirmation-page',   // Menu slug
        'cart_confirmation_page_content', // Callback function
        'dashicons-cart',           // Icon (Cart icon from Dashicons)
        25                           // Position
    );
}

function cart_confirmation_page_content() {
    // Check if user has permission
    if (!current_user_can('manage_options')) {
        return;
    }

    // Handle form submission
    if (isset($_POST['submit'])) {
        update_option('cart_confirmation_heading_en', sanitize_text_field($_POST['heading_en']));
        update_option('cart_confirmation_heading_ar', sanitize_text_field($_POST['heading_ar']));
        update_option('cart_confirmation_description_en', sanitize_textarea_field($_POST['description_en']));
        update_option('cart_confirmation_description_ar', sanitize_textarea_field($_POST['description_ar']));
        echo '<div class="updated"><p>Settings Saved!</p></div>';
    }

    ?>
    <div class="wrap">
        <h1>Cart Confirmation Settings</h1>
        <form method="POST" action="">
            <h2>English</h2>
            <table class="form-table">
                <tr>
                    <th><label for="heading_en">Heading</label></th>
                    <td><input type="text" id="heading_en" name="heading_en" value="<?php echo esc_attr(get_option('cart_confirmation_heading_en')); ?>" class="regular-text" /></td>
                </tr>
                <tr>
                    <th><label for="description_en">Description</label></th>
                    <td><textarea id="description_en" name="description_en" class="large-text"><?php echo esc_textarea(get_option('cart_confirmation_description_en')); ?></textarea></td>
                </tr>
            </table>

            <h2>Arabic</h2>
            <table class="form-table">
                <tr>
                    <th><label for="heading_ar">Heading</label></th>
                    <td><input type="text" id="heading_ar" name="heading_ar" value="<?php echo esc_attr(get_option('cart_confirmation_heading_ar')); ?>" class="regular-text" /></td>
                </tr>
                <tr>
                    <th><label for="description_ar">Description</label></th>
                    <td><textarea id="description_ar" name="description_ar" class="large-text"><?php echo esc_textarea(get_option('cart_confirmation_description_ar')); ?></textarea></td>
                </tr>
            </table>

            <p class="submit">
                <input type="submit" name="submit" id="submit" class="button button-primary" value="Save Changes" />
            </p>
        </form>
    </div>
    <?php
}


// Register custom REST API endpoint
add_action('rest_api_init', 'register_cart_confirmation_api_endpoint');

function register_cart_confirmation_api_endpoint() {
    register_rest_route('cart-confirmation/v1', '/data/', array(
        'methods' => 'GET',
        'callback' => 'get_cart_confirmation_data',
        'permission_callback' => '__return_true', // This makes the endpoint public
    ));
}

// Callback function to return the cart confirmation data
function get_cart_confirmation_data() {
    // Retrieve saved options for English and Arabic
    $data = array(
        'heading_en' => get_option('cart_confirmation_heading_en'),
        'heading_ar' => get_option('cart_confirmation_heading_ar'),
        'description_en' => get_option('cart_confirmation_description_en'),
        'description_ar' => get_option('cart_confirmation_description_ar')
    );

    // Return the data as a response
    return rest_ensure_response($data);
}

